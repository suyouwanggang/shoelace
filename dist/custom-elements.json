{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/ac-panel/ac-panel.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ac-panel/ac-panel.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ac-panel/ac-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAcPanel",
          "cssProperties": [
            {
              "description": "header active background-color.",
              "name": "--ac-tab-active-background-color"
            },
            {
              "description": "header font color.",
              "name": "--ac-header-color"
            },
            {
              "description": "header font size.",
              "name": "--ac-header-font-size"
            },
            {
              "description": "header padding.",
              "name": "--ac-header-padding"
            },
            {
              "description": "the component content  container padding.",
              "name": "--ac-content-padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The header icon part.",
              "name": "trigger-icon"
            },
            {
              "description": "The component content div.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The content slot.",
              "name": ""
            },
            {
              "description": "header-extra slot ,use for header right icon",
              "name": "header-extra"
            },
            {
              "description": "slot used  before title",
              "name": "trigger-icon"
            },
            {
              "description": "header title slot",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ANIMATE_duration",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "500"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "attribute": "key",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string"
              },
              "attribute": "header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderHeader"
            },
            {
              "kind": "field",
              "name": "collapsePane",
              "type": {
                "text": "SlCollapse | null"
              }
            },
            {
              "kind": "method",
              "name": "_clickHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "contentElement",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "fieldName": "key"
            },
            {
              "name": "header",
              "type": {
                "text": "string"
              },
              "fieldName": "header"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-collapse"
          ],
          "tagName": "sl-ac-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAcPanel",
            "module": "src/components/ac-panel/ac-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-ac-panel",
          "declaration": {
            "name": "SlAcPanel",
            "module": "src/components/ac-panel/ac-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/alert/alert.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/alert/alert.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/alert/alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAlert",
          "cssProperties": [
            {
              "description": "The alert's box shadow.",
              "name": "--box-shadow"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the alert icon.",
              "name": "icon"
            },
            {
              "description": "The alert message.",
              "name": "message"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            }
          ],
          "slots": [
            {
              "description": "The alert's content.",
              "name": ""
            },
            {
              "description": "An icon to show in the alert.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autoHideTimeout",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the alert closable.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The type of alert.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
              "attribute": "duration"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the alert."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the alert"
            },
            {
              "kind": "method",
              "name": "toast",
              "parameters": [
                {
                  "name": "stack",
                  "default": "'top-right'",
                  "type": {
                    "text": "StackPosition"
                  }
                }
              ],
              "description": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden."
            },
            {
              "kind": "method",
              "name": "restartAutoHide"
            },
            {
              "kind": "method",
              "name": "handleCloseClick"
            },
            {
              "kind": "method",
              "name": "handleMouseMove"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleDurationChange"
            },
            {
              "kind": "field",
              "name": "notify",
              "static": true,
              "default": "notify",
              "description": "发送全局message 消息"
            }
          ],
          "events": [
            {
              "description": "Emitted when the alert opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the alert opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the alert closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the alert closes and all animations are complete.",
              "name": "sl-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the alert closable.",
              "fieldName": "closable"
            },
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The type of alert.",
              "fieldName": "type"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
              "resolveInitializer": {
                "module": "src/components/alert/alert.ts"
              },
              "fieldName": "duration"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "alert.show",
              "description": "The animation to use when showing the alert."
            },
            {
              "name": "alert.hide",
              "description": "The animation to use when hiding the alert."
            }
          ],
          "tagName": "sl-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAlert",
            "module": "src/components/alert/alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-alert",
          "declaration": {
            "name": "SlAlert",
            "module": "src/components/alert/alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animated-image/animated-image.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/animated-image/animated-image.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animated-image/animated-image.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAnimatedImage",
          "cssProperties": [
            {
              "description": "The size of the icon box.",
              "name": "--control-box-size"
            },
            {
              "description": "The size of the play/pause icons.",
              "name": "--icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "frozenFrame",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "isLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "animatedImage",
              "type": {
                "text": "HTMLImageElement"
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The image's src attribute.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "The image's alt attribute.",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "description": "When set, the image will animate. Otherwise, it will be paused.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleLoad"
            },
            {
              "kind": "method",
              "name": "handleError"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the image loads successfully.",
              "name": "sl-load"
            },
            {
              "description": "Emitted when the image fails to load.",
              "name": "sl-error"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The image's src attribute.",
              "fieldName": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "The image's alt attribute.",
              "fieldName": "alt"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "description": "When set, the image will animate. Otherwise, it will be paused.",
              "fieldName": "play"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-animated-image",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAnimatedImage",
            "module": "src/components/animated-image/animated-image.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-animated-image",
          "declaration": {
            "name": "SlAnimatedImage",
            "module": "src/components/animated-image/animated-image.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animation.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/animation/animation.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAnimation",
          "slots": [
            {
              "description": "The element to animate. If multiple elements are to be animated, wrap them in a single container.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasStarted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "Promise<HTMLSlotElement>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "attribute": "delay"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "attribute": "duration"
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "attribute": "easing"
            },
            {
              "kind": "field",
              "name": "endDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "attribute": "end-delay"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "iterations",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "attribute": "iterations"
            },
            {
              "kind": "field",
              "name": "iterationStart",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "attribute": "iteration-start"
            },
            {
              "kind": "field",
              "name": "keyframes",
              "type": {
                "text": "Keyframe[]"
              },
              "description": "The keyframes to use for the animation. If this is set, `name` will be ignored."
            },
            {
              "kind": "field",
              "name": "playbackRate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "attribute": "playback-rate"
            },
            {
              "kind": "field",
              "name": "currentTime",
              "type": {
                "text": "number"
              },
              "description": "Gets and sets the current animation time."
            },
            {
              "kind": "method",
              "name": "handleAnimationChange"
            },
            {
              "kind": "method",
              "name": "handleAnimationFinish"
            },
            {
              "kind": "method",
              "name": "handleAnimationCancel"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handlePlaybackRateChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "createAnimation"
            },
            {
              "kind": "method",
              "name": "destroyAnimation"
            },
            {
              "kind": "method",
              "name": "cancel",
              "description": "Clears all KeyframeEffects caused by this animation and aborts its playback."
            },
            {
              "kind": "method",
              "name": "finish",
              "description": "Sets the playback time to the end of the animation corresponding to the current playback direction."
            }
          ],
          "events": [
            {
              "description": "Emitted when the animation is canceled.",
              "name": "sl-cancel"
            },
            {
              "description": "Emitted when the animation finishes.",
              "name": "sl-finish"
            },
            {
              "description": "Emitted when the animation starts or restarts.",
              "name": "sl-start"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "fieldName": "name"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
              "fieldName": "play"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "fieldName": "delay"
            },
            {
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
              "fieldName": "direction"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "fieldName": "duration"
            },
            {
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "fieldName": "easing"
            },
            {
              "name": "end-delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "fieldName": "endDelay"
            },
            {
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "fieldName": "fill"
            },
            {
              "name": "iterations",
              "type": {
                "text": "number"
              },
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "resolveInitializer": {
                "module": "src/components/animation/animation.ts"
              },
              "fieldName": "iterations"
            },
            {
              "name": "iteration-start",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "fieldName": "iterationStart"
            },
            {
              "name": "playback-rate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "fieldName": "playbackRate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-animation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAnimation",
            "module": "src/components/animation/animation.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-animation",
          "declaration": {
            "name": "SlAnimation",
            "module": "src/components/animation/animation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animations.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAnimationNames",
          "description": "Gets a list of all supported animation names."
        },
        {
          "kind": "function",
          "name": "getEasingNames",
          "description": "Gets a list of all supported easing function names."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animations",
          "declaration": {
            "name": "animations",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAnimationNames",
          "declaration": {
            "name": "getAnimationNames",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getEasingNames",
          "declaration": {
            "name": "getEasingNames",
            "module": "src/components/animation/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/avatar/avatar.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAvatar",
          "cssProperties": [
            {
              "description": "The size of the avatar.",
              "name": "--size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the avatar icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the avatar initials.",
              "name": "initials"
            },
            {
              "description": "The avatar image.",
              "name": "image"
            }
          ],
          "slots": [
            {
              "description": "The default icon to use when no image or initials are present.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "image",
              "type": {
                "text": "string"
              },
              "description": "The image source to use for the avatar.",
              "attribute": "image"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "Alternative text for the image.",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'circle' | 'square' | 'rounded'"
              },
              "default": "'circle'",
              "description": "The shape of the avatar.",
              "attribute": "shape",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "image",
              "type": {
                "text": "string"
              },
              "description": "The image source to use for the avatar.",
              "fieldName": "image"
            },
            {
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "Alternative text for the image.",
              "fieldName": "alt"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "fieldName": "initials"
            },
            {
              "name": "shape",
              "type": {
                "text": "'circle' | 'square' | 'rounded'"
              },
              "default": "'circle'",
              "description": "The shape of the avatar.",
              "fieldName": "shape"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-avatar",
          "declaration": {
            "name": "SlAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/badge/badge.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBadge",
          "cssParts": [
            {
              "description": "The base wrapper",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The badge's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The badge's type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style badge with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "attribute": "pulse",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The badge's type.",
              "fieldName": "type"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style badge with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "fieldName": "pulse"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBadge",
            "module": "src/components/badge/badge.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-badge",
          "declaration": {
            "name": "SlBadge",
            "module": "src/components/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/breadcrumb/breadcrumb.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBreadcrumb",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more breadcrumb items to display.",
              "name": ""
            },
            {
              "description": "The separator to use between breadcrumb items.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "separatorSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Breadcrumb'",
              "description": "The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\nother assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getSeparator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Breadcrumb'",
              "description": "The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\nother assistive devices.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-breadcrumb",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-breadcrumb",
          "declaration": {
            "name": "SlBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb-item/breadcrumb-item.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/breadcrumb-item/breadcrumb-item.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb-item/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBreadcrumbItem",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The breadcrumb item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix slot.",
              "name": "suffix"
            },
            {
              "description": "The container that wraps the separator slot.",
              "name": "separator"
            }
          ],
          "slots": [
            {
              "description": "The breadcrumb item's label.",
              "name": ""
            },
            {
              "description": "An optional prefix, usually an icon or icon button.",
              "name": "prefix"
            },
            {
              "description": "An optional suffix, usually an icon or icon button.",
              "name": "suffix"
            },
            {
              "description": "The separator to use for the breadcrumb item. This will only change the separator for this item. If you want to change it for all items in the group, set the separator on `<sl-breadcrumb>` instead.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasPrefix",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasSuffix",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "attribute": "rel"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "fieldName": "rel"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-breadcrumb-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBreadcrumbItem",
            "module": "src/components/breadcrumb-item/breadcrumb-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-breadcrumb-item",
          "declaration": {
            "name": "SlBreadcrumbItem",
            "module": "src/components/breadcrumb-item/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/button/button.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlButton",
          "cssParts": [
            {
              "description": "The component's ripple wrapper.",
              "name": "ripple"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The prefix container.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The suffix container.",
              "name": "suffix"
            },
            {
              "description": "The button's caret.",
              "name": "caret"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the button.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasPrefix",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasSuffix",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'default'",
              "description": "The button's type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
              "attribute": "caret",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rippleed",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "default ripple animate enabled , false remove ripple animate",
              "attribute": "rippleed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "attribute": "outline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circle button.",
              "attribute": "circle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "submit",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if activating the button should submit the form. Ignored when `href` is set.",
              "attribute": "submit",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "An optional name for the button. Ignored when `href` is set.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "An optional value for the button. Ignored when `href` is set.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "attribute": "download"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "sl-focus"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'default'",
              "description": "The button's type.",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "fieldName": "size"
            },
            {
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
              "fieldName": "caret"
            },
            {
              "name": "rippleed",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "default ripple animate enabled , false remove ripple animate",
              "fieldName": "rippleed"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "fieldName": "outline"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circle button.",
              "fieldName": "circle"
            },
            {
              "name": "submit",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if activating the button should submit the form. Ignored when `href` is set.",
              "fieldName": "submit"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "An optional name for the button. Ignored when `href` is set.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "An optional value for the button. Ignored when `href` is set.",
              "fieldName": "value"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "fieldName": "download"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-spinner"
          ],
          "tagName": "sl-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlButton",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-button",
          "declaration": {
            "name": "SlButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/button-group/button-group.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlButtonGroup",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more `<sl-button>` elements to display in the button group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group's `aria-label` attribute.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group's `aria-label` attribute.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-button-group",
          "declaration": {
            "name": "SlButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/card/card.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCard",
          "cssProperties": [
            {
              "description": "The card's border color, including borders that occur inside the card.",
              "name": "--border-color"
            },
            {
              "description": "The border radius for card edges.",
              "name": "--border-radius"
            },
            {
              "description": "The width of card borders.",
              "name": "--border-width"
            },
            {
              "description": "The padding to use for card sections.*",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The card's image, if present.",
              "name": "image"
            },
            {
              "description": "The card's header, if present.",
              "name": "header"
            },
            {
              "description": "The card's body.",
              "name": "body"
            },
            {
              "description": "The card's footer, if present.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The card's body.",
              "name": ""
            },
            {
              "description": "The card's header.",
              "name": "header"
            },
            {
              "description": "The card's footer.",
              "name": "footer"
            },
            {
              "description": "The card's image.",
              "name": "image"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasFooter",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasImage",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCard",
            "module": "src/components/card/card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-card",
          "declaration": {
            "name": "SlCard",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/checkbox/checkbox.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCheckbox",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The checkbox control.",
              "name": "control"
            },
            {
              "description": "The container the wraps the checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The container that wraps the indeterminate icon.",
              "name": "indeterminate-icon"
            },
            {
              "description": "The checkbox label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The checkbox's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "ripple",
              "type": {
                "text": "SlRipple"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`checkbox-${++id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`checkbox-label-${id}`"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The checkbox's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | any"
              },
              "description": "The checkbox's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'danger' | 'warning' | 'neutral'"
              },
              "default": "'primary'",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'circle' | 'square'"
              },
              "default": "'square'"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "field",
              "name": "hasLabelSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "labelSlotChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted before  the control's checked state changes,user can cancel default.",
              "name": "sl-before-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The checkbox's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | any"
              },
              "description": "The checkbox's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "fieldName": "disabled"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state.",
              "fieldName": "indeterminate"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            },
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'danger' | 'warning' | 'neutral'"
              },
              "default": "'primary'",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox",
          "declaration": {
            "name": "SlCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/collapse/collapse.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/collapse/collapse.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/collapse/collapse.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCollapse",
          "cssProperties": [
            {
              "description": "collapse border color.",
              "name": "--sl-collapse-border-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许打开多个",
              "attribute": "multi",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "childTabPanel"
            },
            {
              "kind": "method",
              "name": "findTab",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "根据key 查找 子sl-ac-panel"
            },
            {
              "kind": "method",
              "name": "getTabIndex",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "SlAcPanel"
                  }
                }
              ],
              "description": "获取 在父节点中的 index",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "findTabByIndex",
              "return": {
                "type": {
                  "text": "SlAcPanel | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeTab",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setTabToActive",
              "privacy": "public",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "SlAcPanel"
                  }
                },
                {
                  "name": "active",
                  "default": "false"
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{tab:SlAcPanel}"
              },
              "description": "Emitted before a panel active change.",
              "name": "sl-before-tab-change"
            },
            {
              "type": {
                "text": "{tab:SlAcPanel}"
              },
              "description": "Emitted when a panel active changed.",
              "name": "sl-tab-change"
            }
          ],
          "attributes": [
            {
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许打开多个",
              "fieldName": "multi"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-collapse",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCollapse",
            "module": "src/components/collapse/collapse.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-collapse",
          "declaration": {
            "name": "SlCollapse",
            "module": "src/components/collapse/collapse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker/color-picker.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/color-picker/color-picker.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker/color-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlColorPicker",
          "cssProperties": [
            {
              "description": "The width of the color grid.",
              "name": "--grid-width"
            },
            {
              "description": "The height of the color grid.",
              "name": "--grid-height"
            },
            {
              "description": "The size of the color grid's handle.",
              "name": "--grid-handle-size"
            },
            {
              "description": "The height of the hue and alpha sliders.",
              "name": "--slider-height"
            },
            {
              "description": "The diameter of the slider's handle.",
              "name": "--slider-handle-size"
            },
            {
              "description": "The size of each predefined color swatch.",
              "name": "--swatch-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper",
              "name": "base"
            },
            {
              "description": "The color picker's dropdown trigger.",
              "name": "trigger"
            },
            {
              "description": "The container that holds swatches.",
              "name": "swatches"
            },
            {
              "description": "Each individual swatch.",
              "name": "swatch"
            },
            {
              "description": "The color grid.",
              "name": "grid"
            },
            {
              "description": "The color grid's handle.",
              "name": "grid-handle"
            },
            {
              "description": "The hue slider.",
              "name": "hue-slider"
            },
            {
              "description": "The opacity slider.",
              "name": "opacity-slider"
            },
            {
              "description": "Hue and opacity sliders.",
              "name": "slider"
            },
            {
              "description": "Hue and opacity slider handles.",
              "name": "slider-handle"
            },
            {
              "description": "The preview color.",
              "name": "preview"
            },
            {
              "description": "The text input.",
              "name": "input"
            },
            {
              "description": "The toggle format button's base.",
              "name": "format-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "SlInput"
              }
            },
            {
              "kind": "field",
              "name": "previewButton",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "isSafeValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "lastValueEmitted",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "hue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "saturation",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "lightness",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "alpha",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'#ffffff'",
              "description": "The current color.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'hex' | 'rgb' | 'hsl'"
              },
              "default": "'hex'",
              "description": "The format to use for the display value. If opacity is enabled, these will translate to HEXA, RGBA, and HSLA\nrespectively. The color picker will always accept user input in any format (including CSS color names) and convert\nit to the desired format.",
              "attribute": "format"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the color picker inline rather than inside a dropdown.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Determines the size of the color picker's trigger. This has no effect on inline color pickers.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "noFormatToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the format toggle.",
              "attribute": "no-format-toggle"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the color picker.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `setCustomValidity()`\nmethod using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the opacity slider.",
              "attribute": "opacity"
            },
            {
              "kind": "field",
              "name": "uppercase",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the value will be set in lowercase. Set this to true to set it in uppercase instead.",
              "attribute": "uppercase"
            },
            {
              "kind": "field",
              "name": "swatches",
              "type": {
                "text": "string[]"
              },
              "default": "['#d0021b', '#f5a623', '#f8e71c', '#8b572a', '#7ed321', '#417505', '#bd10e0', '#9013fe', '#4a90e2', '#50e3c2', '#b8e986', '#000', '#444', '#888', '#ccc', '#fff']",
              "description": "An array of predefined color swatches to display. Can include any format the color picker can parse, including\nHEX(A), RGB(A), HSL(A), and CSS color names."
            },
            {
              "kind": "method",
              "name": "getFormattedValue",
              "parameters": [
                {
                  "name": "format",
                  "default": "'hex'",
                  "type": {
                    "text": "'hex' | 'hexa' | 'rgb' | 'rgba' | 'hsl' | 'hsla'"
                  }
                }
              ],
              "description": "Returns the current value as a string in the specified format."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleCopy"
            },
            {
              "kind": "method",
              "name": "handleFormatToggle"
            },
            {
              "kind": "method",
              "name": "handleAlphaDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "onMove",
                  "type": {
                    "text": "(x: number, y: number) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAlphaKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "normalizeColorString",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseColor",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setColor",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setLetterCase",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncValues"
            },
            {
              "kind": "method",
              "name": "handleAfterHide"
            },
            {
              "kind": "method",
              "name": "handleFormatChange"
            },
            {
              "kind": "method",
              "name": "handleOpacityChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the color picker's value changes.",
              "name": "sl-change"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'#ffffff'",
              "description": "The current color.",
              "fieldName": "value"
            },
            {
              "name": "format",
              "type": {
                "text": "'hex' | 'rgb' | 'hsl'"
              },
              "default": "'hex'",
              "description": "The format to use for the display value. If opacity is enabled, these will translate to HEXA, RGBA, and HSLA\nrespectively. The color picker will always accept user input in any format (including CSS color names) and convert\nit to the desired format.",
              "fieldName": "format"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the color picker inline rather than inside a dropdown.",
              "fieldName": "inline"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Determines the size of the color picker's trigger. This has no effect on inline color pickers.",
              "fieldName": "size"
            },
            {
              "name": "no-format-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the format toggle.",
              "fieldName": "noFormatToggle"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the color picker.",
              "fieldName": "disabled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `setCustomValidity()`\nmethod using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            },
            {
              "name": "opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the opacity slider.",
              "fieldName": "opacity"
            },
            {
              "name": "uppercase",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the value will be set in lowercase. Set this to true to set it in uppercase instead.",
              "fieldName": "uppercase"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-button",
            "sl-dropdown",
            "sl-input"
          ],
          "tagName": "sl-color-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlColorPicker",
            "module": "src/components/color-picker/color-picker.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-color-picker",
          "declaration": {
            "name": "SlColorPicker",
            "module": "src/components/color-picker/color-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/column/column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlColumn",
          "members": [
            {
              "kind": "field",
              "name": "renderCol",
              "type": {
                "text": "(context: CellHeadContext) => TemplateResult<1>"
              },
              "description": "表头自定义渲染"
            },
            {
              "kind": "field",
              "name": "renderCell",
              "type": {
                "text": "(context: CellContext) => TemplateResult<1> | { template: TemplateResult<1>; colspan?: number; rowspan?: number } | typeof nothing"
              },
              "description": "对应TD渲染 ,接收表格cellContext:作为参数，渲染TD"
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否隐藏此列",
              "attribute": "hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "string"
              },
              "description": "列所对应的字段，在同一个table 中应该唯一，此会作为rowData 的key，支持\".\" 作为分隔符",
              "attribute": "field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "列所对应的label，默认th 就是显示此label",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colAlign",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'center'",
              "description": "列所对应表头TH 的水平对齐方式",
              "attribute": "col-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colvAlign",
              "type": {
                "text": "'top' | 'middle' | 'bottom'"
              },
              "default": "'middle'",
              "description": "列所对应表头TH 的垂直对齐方式",
              "attribute": "col-valign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "列所对应的TD 的水平对齐方式",
              "attribute": "align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vAlign",
              "type": {
                "text": "'top' | 'middle' | 'bottom'"
              },
              "default": "'middle'",
              "description": "列所对应的TD 的垂直对齐方式",
              "attribute": "valign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sortAble",
              "type": {
                "text": "boolean"
              },
              "description": "列是否支持排序",
              "attribute": "sort-able",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resizeAble",
              "type": {
                "text": "boolean"
              },
              "description": "是否支持拖动列的宽度",
              "attribute": "resize-able",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "列宽",
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minWidth",
              "type": {
                "text": "string"
              },
              "description": "最小列宽",
              "attribute": "min-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "string"
              },
              "description": "最大列宽",
              "attribute": "max-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "uniqueID",
              "type": {
                "text": "string"
              },
              "description": "初始化自动生成唯一ID",
              "attribute": "uniqueID",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "order",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "顺序:越小越靠前",
              "attribute": "order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'index' | 'checkbox' | 'radio' | 'date' | 'date-month' | 'date-year'"
              },
              "description": "列的类型，指定类型的列，有特定的渲染，例如index,checkbox,radio,或者会影响列的edit模式",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "edit",
              "type": {
                "text": "EDIT_TYPE | string | ((context: CellContext) => TemplateResult<1>)"
              },
              "description": "列编辑器，内置单元格编辑器 ，EDIT_TYPE:input,text,date,select,multi-select, multi-checkbox, 或者一个函数，实现自定义列编辑器"
            },
            {
              "kind": "field",
              "name": "inputMaxLength",
              "type": {
                "text": "number"
              },
              "description": "编辑器 input,textarea 最大输入长度",
              "attribute": "inputMaxLength"
            },
            {
              "kind": "field",
              "name": "inputMinLength",
              "type": {
                "text": "number"
              },
              "description": "编辑器 input,textarea 最小输入长度",
              "attribute": "inputMinLength"
            },
            {
              "kind": "field",
              "name": "editRequired",
              "type": {
                "text": "boolean"
              },
              "description": "编辑器 是否是必填的 待实现",
              "attribute": "editRequired"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<ColumnItems>"
              },
              "description": "定义列数据映射器,在 会将 rowData[field]转为为显示值，同时在编辑的时候，也会作为select，checkbox 下拉项"
            },
            {
              "kind": "field",
              "name": "childCanShowColumn",
              "type": {
                "text": "SlColumn[]"
              },
              "description": "所有hidden!=false直接子column,并且按照order排序了"
            },
            {
              "kind": "field",
              "name": "childAllColumn",
              "description": "所有直接子column"
            },
            {
              "kind": "field",
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            }
          ],
          "attributes": [
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否隐藏此列",
              "fieldName": "hidden"
            },
            {
              "name": "field",
              "type": {
                "text": "string"
              },
              "description": "列所对应的字段，在同一个table 中应该唯一，此会作为rowData 的key，支持\".\" 作为分隔符",
              "fieldName": "field"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "列所对应的label，默认th 就是显示此label",
              "fieldName": "label"
            },
            {
              "name": "col-align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'center'",
              "description": "列所对应表头TH 的水平对齐方式",
              "fieldName": "colAlign"
            },
            {
              "name": "col-valign",
              "type": {
                "text": "'top' | 'middle' | 'bottom'"
              },
              "default": "'middle'",
              "description": "列所对应表头TH 的垂直对齐方式",
              "fieldName": "colvAlign"
            },
            {
              "name": "align",
              "type": {
                "text": "'left' | 'center' | 'right'"
              },
              "default": "'left'",
              "description": "列所对应的TD 的水平对齐方式",
              "fieldName": "align"
            },
            {
              "name": "valign",
              "type": {
                "text": "'top' | 'middle' | 'bottom'"
              },
              "default": "'middle'",
              "description": "列所对应的TD 的垂直对齐方式",
              "fieldName": "vAlign"
            },
            {
              "name": "sort-able",
              "type": {
                "text": "boolean"
              },
              "description": "列是否支持排序",
              "fieldName": "sortAble"
            },
            {
              "name": "resize-able",
              "type": {
                "text": "boolean"
              },
              "description": "是否支持拖动列的宽度",
              "fieldName": "resizeAble"
            },
            {
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "列宽",
              "fieldName": "width"
            },
            {
              "name": "min-width",
              "type": {
                "text": "string"
              },
              "description": "最小列宽",
              "fieldName": "minWidth"
            },
            {
              "name": "max-width",
              "type": {
                "text": "string"
              },
              "description": "最大列宽",
              "fieldName": "maxWidth"
            },
            {
              "name": "uniqueID",
              "type": {
                "text": "string"
              },
              "description": "初始化自动生成唯一ID",
              "fieldName": "uniqueID"
            },
            {
              "name": "order",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "顺序:越小越靠前",
              "fieldName": "order"
            },
            {
              "name": "type",
              "type": {
                "text": "'index' | 'checkbox' | 'radio' | 'date' | 'date-month' | 'date-year'"
              },
              "description": "列的类型，指定类型的列，有特定的渲染，例如index,checkbox,radio,或者会影响列的edit模式",
              "fieldName": "type"
            },
            {
              "name": "inputMaxLength",
              "type": {
                "text": "number"
              },
              "description": "编辑器 input,textarea 最大输入长度",
              "fieldName": "inputMaxLength"
            },
            {
              "name": "inputMinLength",
              "type": {
                "text": "number"
              },
              "description": "编辑器 input,textarea 最小输入长度",
              "fieldName": "inputMinLength"
            },
            {
              "name": "editRequired",
              "type": {
                "text": "boolean"
              },
              "description": "编辑器 是否是必填的 待实现",
              "fieldName": "editRequired"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-column",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlColumn",
            "module": "src/components/column/column.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-column",
          "declaration": {
            "name": "SlColumn",
            "module": "src/components/column/column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date/date.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date/date.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date/date.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDate",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "sl-date-panel"
            },
            {
              "description": "The input text.",
              "name": "input"
            },
            {
              "description": "The input wrap container.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Makes  dropDown hoist."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "set  dropDown distance for trigger."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "set input size",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "immediate",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "if true,  select a date ,close the dropDown",
              "attribute": "immediate"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "选中日期 ,格式：2018，2018-02, 2018/01， 2018/02/02 ,2018-01-02",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'year' | 'month' | 'date'"
              },
              "default": "'date'",
              "description": "选择模式，年，月，日",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "最小值"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "最大值"
            },
            {
              "kind": "field",
              "name": "maxDate"
            },
            {
              "kind": "field",
              "name": "minDate"
            },
            {
              "kind": "field",
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "display  as  block div",
              "attribute": "block",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handlerDateSelect",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitDateSelect",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "valueDate",
              "type": {
                "text": "Date | undefined"
              },
              "description": "内部 value 所对应的日期"
            },
            {
              "kind": "field",
              "name": "valueDateString",
              "privacy": "public",
              "description": "获取 日期显示值"
            },
            {
              "kind": "field",
              "name": "datePanel",
              "type": {
                "text": "SlDatePanel"
              }
            },
            {
              "kind": "field",
              "name": "dropDown",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "method",
              "name": "watchDisabledPanel"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "watchSelectModeChange"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handlerInputClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when date change  .",
              "name": "sl-date-change"
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "set input size",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "immediate",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "if true,  select a date ,close the dropDown",
              "fieldName": "immediate"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "选中日期 ,格式：2018，2018-02, 2018/01， 2018/02/02 ,2018-01-02",
              "fieldName": "value"
            },
            {
              "name": "mode",
              "type": {
                "text": "'year' | 'month' | 'date'"
              },
              "default": "'date'",
              "description": "选择模式，年，月，日",
              "fieldName": "mode"
            },
            {
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "display  as  block div",
              "fieldName": "block"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-date-panel"
          ],
          "tagName": "sl-date",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDate",
            "module": "src/components/date/date.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-date",
          "declaration": {
            "name": "SlDate",
            "module": "src/components/date/date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-panel/date-panel.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-panel/date-panel.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-panel/date-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDatePanel",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's prevButton .",
              "name": "prevButton"
            },
            {
              "description": "The component's prevButton .",
              "name": "nextButton"
            },
            {
              "description": "The component's  panel wrap select DIV.",
              "name": "panel-base"
            },
            {
              "description": "The component's  select date panel.",
              "name": "date-date"
            },
            {
              "description": "The component's  select month panel.",
              "name": "date-month"
            },
            {
              "description": "The component's  select year panel.",
              "name": "date-year"
            },
            {
              "description": "The component's year panel item: item year.",
              "name": "item-year"
            },
            {
              "description": "The component's month panel item: item month.",
              "name": "item-month"
            },
            {
              "description": "The component's day panel item: item day .",
              "name": "item-date"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "选中日期 ,格式：2018，2018-02, 2018/01， 2018/02/02 ,2018-01-02",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'year' | 'month' | 'date'"
              },
              "default": "'date'",
              "description": "选择模式，年，月，日",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "最小值"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string | number | undefined"
              },
              "description": "最大值"
            },
            {
              "kind": "field",
              "name": "maxDate"
            },
            {
              "kind": "field",
              "name": "minDate"
            },
            {
              "kind": "field",
              "name": "innerMode",
              "type": {
                "text": "'year' | 'month' | 'date'"
              },
              "privacy": "private",
              "default": "'date'"
            },
            {
              "kind": "field",
              "name": "_innerYear",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_innerMonth",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "valueDate",
              "type": {
                "text": "Date | undefined"
              },
              "description": "内部 value 所对应的日期"
            },
            {
              "kind": "field",
              "name": "valueDateString",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "innerDate",
              "type": {
                "text": "Date"
              },
              "privacy": "private",
              "default": "new Date()",
              "description": "内部：维护切换上下面板后显示的时间"
            },
            {
              "kind": "method",
              "name": "watchSelectModeChange"
            },
            {
              "kind": "field",
              "name": "innerDisplayDateStr",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "privacy": "private",
              "description": "渲染顶部"
            },
            {
              "kind": "method",
              "name": "renderDatePanel",
              "privacy": "private",
              "description": "渲染 周和月的天"
            },
            {
              "kind": "method",
              "name": "renderMonthBody",
              "privacy": "private",
              "description": "渲染 年选月Body"
            },
            {
              "kind": "method",
              "name": "emitValueSelectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "触发 date-select 事件"
            },
            {
              "kind": "method",
              "name": "renderYearBody",
              "privacy": "private",
              "description": "渲染 年选月Body"
            },
            {
              "kind": "method",
              "name": "naviagtorByKeyCode",
              "parameters": [
                {
                  "name": "keyCode",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when a date select.",
              "name": "sl-date-select"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "选中日期 ,格式：2018，2018-02, 2018/01， 2018/02/02 ,2018-01-02",
              "fieldName": "value"
            },
            {
              "name": "mode",
              "type": {
                "text": "'year' | 'month' | 'date'"
              },
              "default": "'date'",
              "description": "选择模式，年，月，日",
              "fieldName": "mode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-date-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDatePanel",
            "module": "src/components/date-panel/date-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-date-panel",
          "declaration": {
            "name": "SlDatePanel",
            "module": "src/components/date-panel/date-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/details/details.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/details/details.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/details/details.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDetails",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The summary header.",
              "name": "header"
            },
            {
              "description": "The details summary.",
              "name": "summary"
            },
            {
              "description": "The expand/collapse summary icon.",
              "name": "summary-icon"
            },
            {
              "description": "The details content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The details' content.",
              "name": ""
            },
            {
              "description": "The details' summary. Alternatively, you can use the summary prop.",
              "name": "summary"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "details",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`details-${++id}`"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.",
              "attribute": "summary"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the details so it can't be toggled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the details."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the details"
            },
            {
              "kind": "method",
              "name": "handleSummaryClick"
            },
            {
              "kind": "method",
              "name": "handleSummaryKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the details opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the details opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the details closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the details closes and all animations are complete.",
              "name": "sl-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.",
              "fieldName": "summary"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the details so it can't be toggled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "animations": [
            {
              "name": "details.show",
              "description": "The animation to use when showing details. You can use `height: auto` with this animation."
            },
            {
              "name": "details.hide",
              "description": "The animation to use when hiding details. You can use `height: auto` with this animation."
            }
          ],
          "tagName": "sl-details",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDetails",
            "module": "src/components/details/details.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-details",
          "declaration": {
            "name": "SlDetails",
            "module": "src/components/details/details.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/dialog/dialog.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDialog",
          "cssProperties": [
            {
              "description": "The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            },
            {
              "description": "The dialog panel (where the dialog and its content is rendered).",
              "name": "panel"
            },
            {
              "description": "The dialog header.",
              "name": "header"
            },
            {
              "description": "The dialog title.",
              "name": "title"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The dialog body.",
              "name": "body"
            },
            {
              "description": "The dialog footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The dialog's content.",
              "name": ""
            },
            {
              "description": "The dialog's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "The dialog's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`dialog-${++id}`"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "Modal"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFooter",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dialog"
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dialog opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the dialog opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the dialog closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the dialog closes and all animations are complete.",
              "name": "sl-after-hide"
            },
            {
              "description": "Emitted when the dialog opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the dialog, such as an input or button.",
              "name": "sl-initial-focus"
            },
            {
              "description": "Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay, or pressing the escape key. Calling `event.preventDefault()` will prevent the dialog from closing. Avoid using this unless closing the dialog will result in destructive behavior such as data loss.",
              "name": "sl-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
              "fieldName": "label"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "dialog.show",
              "description": "The animation to use when showing the dialog."
            },
            {
              "name": "dialog.hide",
              "description": "The animation to use when hiding the dialog."
            },
            {
              "name": "dialog.denyClose",
              "description": "The animation to use when a request to close the dialog is denied."
            },
            {
              "name": "dialog.overlay.show",
              "description": "The animation to use when showing the dialog's overlay."
            },
            {
              "name": "dialog.overlay.hide",
              "description": "The animation to use when hiding the dialog's overlay."
            }
          ],
          "tagName": "sl-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-dialog",
          "declaration": {
            "name": "SlDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/divider/divider.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDivider",
          "cssProperties": [
            {
              "description": "The color of the divider.",
              "name": "--color"
            },
            {
              "description": "The spacing between the divider and neighboring elements.",
              "name": "--spacing"
            },
            {
              "description": "The width of the divider.",
              "name": "--width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "fieldName": "vertical"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDivider",
            "module": "src/components/divider/divider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-divider",
          "declaration": {
            "name": "SlDivider",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/drawer/drawer.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/drawer/drawer.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/drawer/drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDrawer",
          "cssProperties": [
            {
              "description": "The preferred size of the drawer. This will be applied to the drawer's width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens.",
              "name": "--size"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            },
            {
              "description": "The drawer panel (where the drawer and its content is rendered).",
              "name": "panel"
            },
            {
              "description": "The drawer header.",
              "name": "header"
            },
            {
              "description": "The drawer title.",
              "name": "title"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The drawer body.",
              "name": "body"
            },
            {
              "description": "The drawer footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The drawer's content.",
              "name": ""
            },
            {
              "description": "The drawer's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "The drawer's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "drawer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`drawer-${++id}`"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "Modal"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFooter",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'end' | 'bottom' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\nits parent element, set this prop and add `position: relative` to the parent.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the drawer.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the drawer"
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the drawer opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the drawer opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the drawer closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the drawer closes and all animations are complete.",
              "name": "sl-after-hide"
            },
            {
              "description": "Emitted when the drawer opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the drawer, such as an input or button.",
              "name": "sl-initial-focus"
            },
            {
              "description": "Emitted when the user attempts to close the drawer by clicking the close button, clicking the overlay, or pressing the escape key. Calling `event.preventDefault()` will prevent the drawer from closing. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.",
              "name": "sl-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'end' | 'bottom' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "fieldName": "placement"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\nits parent element, set this prop and add `position: relative` to the parent.",
              "fieldName": "contained"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the drawer.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "drawer.showTop",
              "description": "The animation to use when showing a drawer with `top` placement."
            },
            {
              "name": "drawer.showEnd",
              "description": "The animation to use when showing a drawer with `end` placement."
            },
            {
              "name": "drawer.showBottom",
              "description": "The animation to use when showing a drawer with `bottom` placement."
            },
            {
              "name": "drawer.showStart",
              "description": "The animation to use when showing a drawer with `start` placement."
            },
            {
              "name": "drawer.hideTop",
              "description": "The animation to use when hiding a drawer with `top` placement."
            },
            {
              "name": "drawer.hideEnd",
              "description": "The animation to use when hiding a drawer with `end` placement."
            },
            {
              "name": "drawer.hideBottom",
              "description": "The animation to use when hiding a drawer with `bottom` placement."
            },
            {
              "name": "drawer.hideStart",
              "description": "The animation to use when hiding a drawer with `start` placement."
            },
            {
              "name": "drawer.denyClose",
              "description": "The animation to use when a request to close the drawer is denied."
            },
            {
              "name": "drawer.overlay.show",
              "description": "The animation to use when showing the drawer's overlay."
            },
            {
              "name": "drawer.overlay.hide",
              "description": "The animation to use when hiding the drawer's overlay."
            }
          ],
          "tagName": "sl-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDrawer",
            "module": "src/components/drawer/drawer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-drawer",
          "declaration": {
            "name": "SlDrawer",
            "module": "src/components/drawer/drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/dropdown/dropdown.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDropdown",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the trigger.",
              "name": "trigger"
            },
            {
              "description": "The panel that gets shown when the dropdown is open.",
              "name": "panel"
            }
          ],
          "slots": [
            {
              "description": "The dropdown's content.",
              "name": ""
            },
            {
              "description": "The dropdown's trigger, usually a `<sl-button>` element.",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "positioner",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`dropdown-${++id}`"
            },
            {
              "kind": "field",
              "name": "popover",
              "type": {
                "text": "PopperInstance"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking)."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "focusOnTrigger"
            },
            {
              "kind": "method",
              "name": "getMenu"
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMenuItemActivate",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePanelSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePopoverOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dropdown panel."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dropdown panel"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu\nis activated."
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dropdown opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the dropdown opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the dropdown closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the dropdown closes and all animations are complete.",
              "name": "sl-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "fieldName": "disabled"
            },
            {
              "name": "stay-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "fieldName": "skidding"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "animations": [
            {
              "name": "dropdown.show",
              "description": "The animation to use when showing the dropdown."
            },
            {
              "name": "dropdown.hide",
              "description": "The animation to use when hiding the dropdown."
            }
          ],
          "tagName": "sl-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-dropdown",
          "declaration": {
            "name": "SlDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form/form.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/form/form.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form/form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlForm",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The form's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "formControls",
              "type": {
                "text": "FormControl[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "novalidate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent the form from validating inputs before submitting.",
              "attribute": "novalidate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getFormData",
              "description": "Serializes all form controls elements and returns a `FormData` object."
            },
            {
              "kind": "method",
              "name": "getFormControls",
              "description": "Gets all form control elements (native and custom)."
            },
            {
              "kind": "method",
              "name": "submit",
              "description": "Submits the form. If all controls are valid, the `sl-submit` event will be emitted and the promise will resolve\nwith `true`. If any form control is invalid, the promise will resolve with `false` and no event will be emitted."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "serializeElement",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "formData",
                  "type": {
                    "text": "FormData"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ formData: FormData, formControls: [] }"
              },
              "description": "Emitted when the form is submitted. This event will not be emitted if any form control inside of it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent this event, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional around the XHR request you use to submit the form's data with.",
              "name": "sl-submit"
            }
          ],
          "attributes": [
            {
              "name": "novalidate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent the form from validating inputs before submitting.",
              "fieldName": "novalidate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-form",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlForm",
            "module": "src/components/form/form.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form",
          "declaration": {
            "name": "SlForm",
            "module": "src/components/form/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-bytes/format-bytes.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatBytes",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format in bytes.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'bytes' | 'bits'"
              },
              "default": "'bytes'",
              "description": "The unit to display.",
              "attribute": "unit"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "attribute": "locale"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format in bytes.",
              "fieldName": "value"
            },
            {
              "name": "unit",
              "type": {
                "text": "'bytes' | 'bits'"
              },
              "default": "'bytes'",
              "description": "The unit to display.",
              "fieldName": "unit"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "fieldName": "locale"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-bytes",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatBytes",
            "module": "src/components/format-bytes/format-bytes.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-bytes",
          "declaration": {
            "name": "SlFormatBytes",
            "module": "src/components/format-bytes/format-bytes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-date/format-date.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatDate",
          "members": [
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date/time to format. If not set, the current date and time will be used.",
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the date/time.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "weekday",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the weekday.",
              "attribute": "weekday"
            },
            {
              "kind": "field",
              "name": "era",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the era.",
              "attribute": "era"
            },
            {
              "kind": "field",
              "name": "year",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the year.",
              "attribute": "year"
            },
            {
              "kind": "field",
              "name": "month",
              "type": {
                "text": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the month.",
              "attribute": "month"
            },
            {
              "kind": "field",
              "name": "day",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the day.",
              "attribute": "day"
            },
            {
              "kind": "field",
              "name": "hour",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the hour.",
              "attribute": "hour"
            },
            {
              "kind": "field",
              "name": "minute",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the minute.",
              "attribute": "minute"
            },
            {
              "kind": "field",
              "name": "second",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the second.",
              "attribute": "second"
            },
            {
              "kind": "field",
              "name": "timeZoneName",
              "type": {
                "text": "'short' | 'long'"
              },
              "description": "The format for displaying the time.",
              "attribute": "time-zone-name"
            },
            {
              "kind": "field",
              "name": "timeZone",
              "type": {
                "text": "string"
              },
              "description": "The time zone to express the time in.",
              "attribute": "time-zone"
            },
            {
              "kind": "field",
              "name": "hourFormat",
              "type": {
                "text": "'auto' | '12' | '24'"
              },
              "default": "'auto'",
              "description": "When set, 24 hour time will always be used.",
              "attribute": "hour-format"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date/time to format. If not set, the current date and time will be used.",
              "fieldName": "date"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the date/time.",
              "fieldName": "locale"
            },
            {
              "name": "weekday",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the weekday.",
              "fieldName": "weekday"
            },
            {
              "name": "era",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the era.",
              "fieldName": "era"
            },
            {
              "name": "year",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the year.",
              "fieldName": "year"
            },
            {
              "name": "month",
              "type": {
                "text": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the month.",
              "fieldName": "month"
            },
            {
              "name": "day",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the day.",
              "fieldName": "day"
            },
            {
              "name": "hour",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the hour.",
              "fieldName": "hour"
            },
            {
              "name": "minute",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the minute.",
              "fieldName": "minute"
            },
            {
              "name": "second",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the second.",
              "fieldName": "second"
            },
            {
              "name": "time-zone-name",
              "type": {
                "text": "'short' | 'long'"
              },
              "description": "The format for displaying the time.",
              "fieldName": "timeZoneName"
            },
            {
              "name": "time-zone",
              "type": {
                "text": "string"
              },
              "description": "The time zone to express the time in.",
              "fieldName": "timeZone"
            },
            {
              "name": "hour-format",
              "type": {
                "text": "'auto' | '12' | '24'"
              },
              "default": "'auto'",
              "description": "When set, 24 hour time will always be used.",
              "fieldName": "hourFormat"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-date",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatDate",
            "module": "src/components/format-date/format-date.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-date",
          "declaration": {
            "name": "SlFormatDate",
            "module": "src/components/format-date/format-date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-number/format-number.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatNumber",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'currency' | 'decimal' | 'percent'"
              },
              "default": "'decimal'",
              "description": "The formatting style to use.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "noGrouping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off grouping separators.",
              "attribute": "no-grouping"
            },
            {
              "kind": "field",
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "'USD'",
              "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
              "attribute": "currency"
            },
            {
              "kind": "field",
              "name": "currencyDisplay",
              "type": {
                "text": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              },
              "default": "'symbol'",
              "description": "How to display the currency.",
              "attribute": "currency-display"
            },
            {
              "kind": "field",
              "name": "minimumIntegerDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
              "attribute": "minimum-integer-digits"
            },
            {
              "kind": "field",
              "name": "minimumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
              "attribute": "minimum-fraction-digits"
            },
            {
              "kind": "field",
              "name": "maximumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
              "attribute": "maximum-fraction-digits"
            },
            {
              "kind": "field",
              "name": "minimumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
              "attribute": "minimum-significant-digits"
            },
            {
              "kind": "field",
              "name": "maximumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
              "attribute": "maximum-significant-digits"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format.",
              "fieldName": "value"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "fieldName": "locale"
            },
            {
              "name": "type",
              "type": {
                "text": "'currency' | 'decimal' | 'percent'"
              },
              "default": "'decimal'",
              "description": "The formatting style to use.",
              "fieldName": "type"
            },
            {
              "name": "no-grouping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off grouping separators.",
              "fieldName": "noGrouping"
            },
            {
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "'USD'",
              "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
              "fieldName": "currency"
            },
            {
              "name": "currency-display",
              "type": {
                "text": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              },
              "default": "'symbol'",
              "description": "How to display the currency.",
              "fieldName": "currencyDisplay"
            },
            {
              "name": "minimum-integer-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
              "fieldName": "minimumIntegerDigits"
            },
            {
              "name": "minimum-fraction-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
              "fieldName": "minimumFractionDigits"
            },
            {
              "name": "maximum-fraction-digits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
              "fieldName": "maximumFractionDigits"
            },
            {
              "name": "minimum-significant-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
              "fieldName": "minimumSignificantDigits"
            },
            {
              "name": "maximum-significant-digits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
              "fieldName": "maximumSignificantDigits"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-number",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatNumber",
            "module": "src/components/format-number/format-number.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-number",
          "declaration": {
            "name": "SlFormatNumber",
            "module": "src/components/format-number/format-number.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/gallery/gallery.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/gallery/gallery.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/gallery/gallery.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlGallery",
          "cssProperties": [
            {
              "description": " thumb-images size default 100px .",
              "name": "--thumb-image-size"
            },
            {
              "description": "--transition time  default 450ms - .",
              "name": "--sl-image-transition-time:"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The real images container.",
              "name": "images"
            },
            {
              "description": "The thumb images container.",
              "name": "thumbs"
            },
            {
              "description": "The current image to display.",
              "name": "image"
            },
            {
              "description": "The left nav button.",
              "name": "left-nav"
            },
            {
              "description": "The right nav button.",
              "name": "right-nav"
            },
            {
              "description": "The smal nav-button",
              "name": "nav-button"
            },
            {
              "description": "The thums inner images",
              "name": "thumb-image"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "images",
              "type": {
                "text": "Array<string>"
              },
              "description": "图片路径.",
              "attribute": "images"
            },
            {
              "kind": "field",
              "name": "thumb_images",
              "type": {
                "text": "Array<string> | undefined"
              },
              "description": "缩略图图片路径，如果不设置，默认为images",
              "attribute": "thumb_images"
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "currentIndex"
            },
            {
              "kind": "field",
              "name": "thumbPosition",
              "type": {
                "text": "'bottom' | 'left' | 'top' | 'right'"
              },
              "default": "'bottom'",
              "description": "缩略图显示位置",
              "attribute": "thumb-position"
            },
            {
              "kind": "field",
              "name": "image_datas",
              "type": {
                "text": "Array<unknown>"
              },
              "default": "[]",
              "description": "图片对于其他其他数据",
              "attribute": "image_datas"
            },
            {
              "kind": "field",
              "name": "imageRender",
              "type": {
                "text": "(this: SlGallery, image_data: unknown, index: number) => TemplateResult<1> | undefined"
              },
              "description": "当前图片自定义显示",
              "attribute": "imageRender"
            },
            {
              "kind": "field",
              "name": "show_pause",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示暂停按钮"
            },
            {
              "kind": "field",
              "name": "layImage",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否延迟加载图片"
            },
            {
              "kind": "field",
              "name": "autoPlay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否自动切换展示图片"
            },
            {
              "kind": "field",
              "name": "autoPlaytimes",
              "type": {
                "text": "number"
              },
              "default": "2000",
              "description": "自动切换时间"
            },
            {
              "kind": "field",
              "name": "_intervalTimeID",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "show_fullscreen",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示 全屏按钮"
            },
            {
              "kind": "field",
              "name": "showNavButtons",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示 左右切换按钮"
            },
            {
              "kind": "field",
              "name": "windowKeyEnable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "可以通过 全局 left,right 键来调整当前图片"
            },
            {
              "kind": "field",
              "name": "isFullScreened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否全屏 :内部使用"
            },
            {
              "kind": "method",
              "name": "watchAutoPlay"
            },
            {
              "kind": "field",
              "name": "_windowKeyHander",
              "type": {
                "text": "DisposeObject | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "keyEnableChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "goImageByChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "changeNumber",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "根据相对位置调整 当前显示的图片"
            },
            {
              "kind": "method",
              "name": "watchChangeImages"
            },
            {
              "kind": "field",
              "name": "_loadedOneImage",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "renderNavLefAndRight",
              "privacy": "private",
              "description": "渲染 左右切换图片按钮"
            },
            {
              "kind": "method",
              "name": "renderThumbimages",
              "privacy": "private",
              "description": "渲染 thumbimages"
            },
            {
              "kind": "method",
              "name": "renderImages",
              "privacy": "private",
              "description": "渲染 images"
            },
            {
              "kind": "method",
              "name": "renderImgeNavigations",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderPauseButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderFullScreenButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "changeFullScreenState",
              "privacy": "public",
              "description": "改变组件全屏状态"
            },
            {
              "kind": "method",
              "name": "caculateThumbPotion",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeRemoveAbleObj",
              "type": {
                "text": "DisposeObject"
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{value:number,toValue:number}"
              },
              "description": "Emitted when before change the current image index .",
              "name": "sl-gallery-before-change"
            },
            {
              "type": {
                "text": "{value:number}"
              },
              "description": "Emitted current image index changed.",
              "name": "sl-gallery-change"
            },
            {
              "type": {
                "text": "{image:Image}"
              },
              "description": "Emitted  image load.",
              "name": "sl-gallery-image-load"
            },
            {
              "type": {
                "text": "{image:Image}"
              },
              "description": "Emitted  image click.",
              "name": "sl-gallery-image-click"
            }
          ],
          "attributes": [
            {
              "name": "images",
              "type": {
                "text": "Array<string>"
              },
              "description": "图片路径.",
              "fieldName": "images"
            },
            {
              "name": "thumb_images",
              "type": {
                "text": "Array<string> | undefined"
              },
              "description": "缩略图图片路径，如果不设置，默认为images",
              "fieldName": "thumb_images"
            },
            {
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "currentIndex"
            },
            {
              "name": "thumb-position",
              "type": {
                "text": "'bottom' | 'left' | 'top' | 'right'"
              },
              "default": "'bottom'",
              "description": "缩略图显示位置",
              "fieldName": "thumbPosition"
            },
            {
              "name": "image_datas",
              "type": {
                "text": "Array<unknown>"
              },
              "default": "[]",
              "description": "图片对于其他其他数据",
              "fieldName": "image_datas"
            },
            {
              "name": "imageRender",
              "type": {
                "text": "(this: SlGallery, image_data: unknown, index: number) => TemplateResult<1> | undefined"
              },
              "description": "当前图片自定义显示",
              "fieldName": "imageRender"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-gallery",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlGallery",
            "module": "src/components/gallery/gallery.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-gallery",
          "declaration": {
            "name": "SlGallery",
            "module": "src/components/gallery/gallery.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/icon/icon.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlIcon",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to draw.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "An external URL of an SVG file.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "attribute": "library"
            },
            {
              "kind": "method",
              "name": "getLabel"
            },
            {
              "kind": "method",
              "name": "getUrl",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "setIcon"
            },
            {
              "kind": "method",
              "name": "handleChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon has loaded.",
              "name": "sl-load"
            },
            {
              "type": {
                "text": "{ status: number }"
              },
              "description": "Emitted when the icon fails to load due to an error.",
              "name": "sl-error"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to draw.",
              "fieldName": "name"
            },
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "An external URL of an SVG file.",
              "fieldName": "src"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.",
              "fieldName": "label"
            },
            {
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlIcon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-icon",
          "declaration": {
            "name": "SlIcon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.default.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "library",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{\n  name: 'default',\n  resolver: name => `${getBasePath()}/assets/icons/${name}.svg`\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "library",
            "module": "src/components/icon/library.default.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.system.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "systemLibrary",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{\n  name: 'system',\n  resolver: (name: keyof typeof icons) => {\n    if (icons[name]) {\n      return `data:image/svg+xml,${encodeURIComponent(icons[name])}`;\n    } else {\n      return '';\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "systemLibrary",
            "module": "src/components/icon/library.system.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "SlIcon"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "unwatchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "SlIcon"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIconLibrary",
          "parameters": [
            {
              "name": "name",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "registerIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "{ resolver: IconLibraryResolver; mutator?: IconLibraryMutator }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "unregisterIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watchIcon",
          "declaration": {
            "name": "watchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unwatchIcon",
          "declaration": {
            "name": "unwatchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconLibrary",
          "declaration": {
            "name": "getIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIconLibrary",
          "declaration": {
            "name": "registerIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unregisterIconLibrary",
          "declaration": {
            "name": "unregisterIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestIcon",
          "parameters": [
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestIcon",
          "declaration": {
            "name": "requestIcon",
            "module": "src/components/icon/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/icon-button/icon-button.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlIconButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to draw.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "description": "The name of a registered custom icon library.",
              "attribute": "library"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "An external URL of an SVG file.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon to draw.",
              "fieldName": "name"
            },
            {
              "name": "library",
              "type": {
                "text": "string"
              },
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            },
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "An external URL of an SVG file.",
              "fieldName": "src"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "fieldName": "download"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-icon-button",
          "declaration": {
            "name": "SlIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/image-comparer/image-comparer.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/image-comparer/image-comparer.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/image-comparer/image-comparer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlImageComparer",
          "cssProperties": [
            {
              "description": "The width of the dividing line.",
              "name": "--divider-width"
            },
            {
              "description": "The size of the compare handle.",
              "name": "--handle-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that holds the \"before\" image.",
              "name": "before"
            },
            {
              "description": "The container that holds the \"after\" image.",
              "name": "after"
            },
            {
              "description": "The divider that separates the images.",
              "name": "divider"
            },
            {
              "description": "The handle that the user drags to expose the after image.",
              "name": "handle"
            }
          ],
          "slots": [
            {
              "description": "The before image, an `<img>` or `<svg>` element.",
              "name": "before"
            },
            {
              "description": "The after image, an `<img>` or `<svg>` element.",
              "name": "after"
            },
            {
              "description": "The icon used inside the handle.",
              "name": "handle-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "handle",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePositionChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the position changes.",
              "name": "sl-change"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "fieldName": "position"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-image-comparer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlImageComparer",
            "module": "src/components/image-comparer/image-comparer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-image-comparer",
          "declaration": {
            "name": "SlImageComparer",
            "module": "src/components/image-comparer/image-comparer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/include.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/include/include.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/include.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlInclude",
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "allowScripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
              "attribute": "allow-scripts"
            },
            {
              "kind": "method",
              "name": "executeScript",
              "parameters": [
                {
                  "name": "script",
                  "type": {
                    "text": "HTMLScriptElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the included file is loaded.",
              "name": "sl-load"
            },
            {
              "type": {
                "text": "{ status: number }"
              },
              "description": "Emitted when the included file fails to load due to an error.",
              "name": "sl-error"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include.",
              "fieldName": "src"
            },
            {
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "fieldName": "mode"
            },
            {
              "name": "allow-scripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
              "fieldName": "allowScripts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-include",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlInclude",
            "module": "src/components/include/include.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-include",
          "declaration": {
            "name": "SlInclude",
            "module": "src/components/include/include.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestInclude",
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "mode",
              "default": "'cors'",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestInclude",
          "declaration": {
            "name": "requestInclude",
            "module": "src/components/include/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/input/input.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlInput",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The form control that wraps the label, input, and help-text.",
              "name": "form-control"
            },
            {
              "description": "The input label.",
              "name": "label"
            },
            {
              "description": "The input control.",
              "name": "input"
            },
            {
              "description": "The input prefix container.",
              "name": "prefix"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The input suffix container.",
              "name": "suffix"
            },
            {
              "description": "The input help text.",
              "name": "help-text"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "Used to prepend an icon or similar element to the input.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the input.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            },
            {
              "description": "Help text that describes how to use the input. Alternatively, you can use the help-text prop.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`input-${++id}`"
            },
            {
              "kind": "field",
              "name": "helpTextId",
              "privacy": "private",
              "default": "`input-help-text-${id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`input-label-${id}`"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHelpTextSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasLabelSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isPasswordVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'date' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "The input's type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The input's label. Alternatively, you can use the label slot.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. Alternatively, you can use the help-text slot.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is populated.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "togglePassword",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a password toggle button to password inputs.",
              "attribute": "toggle-password"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The input's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "description": "The input's step attribute.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The input's autocaptialize attribute.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The input's autocorrect attribute.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The input's autocomplete attribute.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The input's autofocus attribute.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The input's inputmode attribute.",
              "attribute": "inputmode"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleInvalid"
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "sl-clear"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "sl-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'date' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "The input's type.",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The input's label. Alternatively, you can use the label slot.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. Alternatively, you can use the help-text slot.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is populated.",
              "fieldName": "clearable"
            },
            {
              "name": "toggle-password",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a password toggle button to password inputs.",
              "fieldName": "togglePassword"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The input's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "description": "The input's step attribute.",
              "fieldName": "step"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The input's autocaptialize attribute.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The input's autocorrect attribute.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The input's autocomplete attribute.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The input's autofocus attribute.",
              "fieldName": "autofocus"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The input's inputmode attribute.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlInput",
            "module": "src/components/input/input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-input",
          "declaration": {
            "name": "SlInput",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/layout.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/layout/layout.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/layout.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlLayout",
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "row",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否按照行进行Flex row布局",
              "attribute": "row"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否按照列进行Flex column布局",
              "attribute": "column"
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否 主轴，次轴都居中",
              "attribute": "center"
            },
            {
              "kind": "field",
              "name": "expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否扩展剩余空间",
              "attribute": "expand"
            },
            {
              "kind": "field",
              "name": "main",
              "type": {
                "text": "'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'"
              },
              "description": "主轴子项对齐方式",
              "attribute": "main"
            },
            {
              "kind": "field",
              "name": "cross",
              "type": {
                "text": "'start' | 'end' | 'center' | 'baseline' | 'stretch'"
              },
              "description": "次轴子项对齐方式",
              "attribute": "cross"
            },
            {
              "kind": "method",
              "name": "setXYChange"
            }
          ],
          "attributes": [
            {
              "name": "row",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否按照行进行Flex row布局",
              "fieldName": "row"
            },
            {
              "name": "column",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否按照列进行Flex column布局",
              "fieldName": "column"
            },
            {
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否 主轴，次轴都居中",
              "fieldName": "center"
            },
            {
              "name": "expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否扩展剩余空间",
              "fieldName": "expand"
            },
            {
              "name": "main",
              "type": {
                "text": "'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'"
              },
              "description": "主轴子项对齐方式",
              "fieldName": "main"
            },
            {
              "name": "cross",
              "type": {
                "text": "'start' | 'end' | 'center' | 'baseline' | 'stretch'"
              },
              "description": "次轴子项对齐方式",
              "fieldName": "cross"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-layout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlLayout",
            "module": "src/components/layout/layout.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-layout",
          "declaration": {
            "name": "SlLayout",
            "module": "src/components/layout/layout.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/markdown-element/markdown-element.styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "result",
          "default": "css`\n  ${componentStyles}\n  ${styleObject}\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "result",
            "module": "src/components/markdown-element/markdown-element.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/markdown-element/markdown-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMarkdownElement",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "mdsrc",
              "type": {
                "text": "string"
              },
              "description": "mdsrc markdown resource",
              "attribute": "mdsrc"
            },
            {
              "kind": "field",
              "name": "markdown",
              "type": {
                "text": "string"
              },
              "description": "the markdown string",
              "attribute": "markdown"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "'light' | 'dark' | 'ant' | 'wechat'"
              },
              "default": "'ant'",
              "description": "theme name for  prismjs"
            },
            {
              "kind": "field",
              "name": "_themeCss",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "themeChange"
            },
            {
              "kind": "field",
              "name": "cdn",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'https://cdn.jsdelivr.net/npm/vditor@3.8.6'"
            },
            {
              "kind": "field",
              "name": "fetchMode",
              "type": {
                "text": "'cors' | 'same-origin' | 'no-cors' | 'navigate'"
              },
              "default": "'same-origin'"
            },
            {
              "kind": "method",
              "name": "fetchAsText",
              "parameters": [
                {
                  "name": "src",
                  "type": {
                    "text": "String"
                  },
                  "description": "url to fetch"
                }
              ],
              "return": {
                "type": {
                  "text": "Promise"
                }
              }
            },
            {
              "kind": "field",
              "name": "baseDiv",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "mdsrc",
              "type": {
                "text": "string"
              },
              "description": "mdsrc markdown resource",
              "fieldName": "mdsrc"
            },
            {
              "name": "markdown",
              "type": {
                "text": "string"
              },
              "description": "the markdown string",
              "fieldName": "markdown"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-markdown-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMarkdownElement",
            "module": "src/components/markdown-element/markdown-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-markdown-element",
          "declaration": {
            "name": "SlMarkdownElement",
            "module": "src/components/markdown-element/markdown-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/menu/menu.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenu",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The menu's content, including menu items, menu labels, and dividers.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllItems",
              "parameters": [
                {
                  "name": "options",
                  "default": "{ includeDisabled: true }",
                  "type": {
                    "text": "{ includeDisabled: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "typeToSelect",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\nThe key passed will be appended to the internal query and the selection will be updated. After a brief period, the\ninternal query is cleared automatically. This method is intended to be used with the keydown event. Useful for\nenabling type-to-select when the menu doesn't have focus."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyUp"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ item: SlMenuItem }"
              },
              "description": "Emitted when a menu item is selected.",
              "name": "sl-select"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenu",
            "module": "src/components/menu/menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu",
          "declaration": {
            "name": "SlMenu",
            "module": "src/components/menu/menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-item/menu-item.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/menu-item/menu-item.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-item/menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenuItem",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The prefix container.",
              "name": "prefix"
            },
            {
              "description": "The menu item label.",
              "name": "label"
            },
            {
              "description": "The suffix container.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The menu item's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "hightlight this menu-item",
              "attribute": "highlight",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "number | string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state.",
              "fieldName": "disabled"
            },
            {
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "hightlight this menu-item",
              "fieldName": "highlight"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenuItem",
            "module": "src/components/menu-item/menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-item",
          "declaration": {
            "name": "SlMenuItem",
            "module": "src/components/menu-item/menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-label/menu-label.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/menu-label/menu-label.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-label/menu-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenuLabel",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The menu label's content.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-menu-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenuLabel",
            "module": "src/components/menu-label/menu-label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-label",
          "declaration": {
            "name": "SlMenuLabel",
            "module": "src/components/menu-label/menu-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mutation-observer/mutation-observer.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/mutation-observer/mutation-observer.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mutation-observer/mutation-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMutationObserver",
          "slots": [
            {
              "description": "The content to watch for mutations.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "Watches for changes to attributes. If empty, all changes will be reported. To watch only specific attributes,\nseparate them by a space.",
              "attribute": "attr",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "attrOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
              "attribute": "attr-old-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "charData",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for changes to the character data contained within the node.",
              "attribute": "char-data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "charDataOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the previous value of the node's text should be recorded.",
              "attribute": "char-data-old-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "childList",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for the addition or removal of new child nodes.",
              "attribute": "child-list",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleMutation",
              "parameters": [
                {
                  "name": "mutationList",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "startObserver"
            },
            {
              "kind": "method",
              "name": "stopObserver"
            }
          ],
          "events": [
            {
              "description": "Emitted when a mutation occurs.",
              "name": "sl-mutation"
            }
          ],
          "attributes": [
            {
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "Watches for changes to attributes. If empty, all changes will be reported. To watch only specific attributes,\nseparate them by a space.",
              "fieldName": "attr"
            },
            {
              "name": "attr-old-value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
              "fieldName": "attrOldValue"
            },
            {
              "name": "char-data",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for changes to the character data contained within the node.",
              "fieldName": "charData"
            },
            {
              "name": "char-data-old-value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the previous value of the node's text should be recorded.",
              "fieldName": "charDataOldValue"
            },
            {
              "name": "child-list",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for the addition or removal of new child nodes.",
              "fieldName": "childList"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-mutation-observer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMutationObserver",
            "module": "src/components/mutation-observer/mutation-observer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-mutation-observer",
          "declaration": {
            "name": "SlMutationObserver",
            "module": "src/components/mutation-observer/mutation-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/org-node/org-node.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/org-node/org-node.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/org-node/org-node.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultRoleRender",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "OrgNodeDataType"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlOrgNode",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nodeData",
              "type": {
                "text": "OrgNodeDataType"
              },
              "description": "节点数据",
              "attribute": "nodeData"
            },
            {
              "kind": "field",
              "name": "collapsable",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "节点是否允许收缩",
              "attribute": "collapsable"
            },
            {
              "kind": "field",
              "name": "styleClass",
              "type": {
                "text": "string"
              },
              "description": "组织架构节点自定义样式",
              "attribute": "styleClass"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "节点是展开，还是收拢，默认是展开",
              "attribute": "expanded"
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "field",
              "name": "nodeRender",
              "type": {
                "text": "(node: OrgNodeDataType) => TemplateResult<1> | TemplateResult<1>[]"
              },
              "default": "defaultRoleRender",
              "description": "节点自定义渲染",
              "attribute": "nodeRender"
            },
            {
              "kind": "method",
              "name": "onNodeClick"
            },
            {
              "kind": "method",
              "name": "_emitEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "eventName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onToogleNode",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderChildNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "subOrgNodes",
              "type": {
                "text": "SlOrgNode[]"
              }
            },
            {
              "kind": "field",
              "name": "isLeaf"
            },
            {
              "kind": "field",
              "name": "_childNodeSize"
            }
          ],
          "events": [
            {
              "description": "{data:any} - click node Data Element .",
              "name": "sl-node-click"
            },
            {
              "description": "{data:any} - toogle node Element .",
              "name": "sl-node-toogle"
            },
            {
              "description": "{data:any} -before toogle node Element .",
              "name": "sl-node-before-toogle"
            }
          ],
          "attributes": [
            {
              "name": "nodeData",
              "type": {
                "text": "OrgNodeDataType"
              },
              "description": "节点数据",
              "fieldName": "nodeData"
            },
            {
              "name": "collapsable",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "节点是否允许收缩",
              "fieldName": "collapsable"
            },
            {
              "name": "styleClass",
              "type": {
                "text": "string"
              },
              "description": "组织架构节点自定义样式",
              "fieldName": "styleClass"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "节点是展开，还是收拢，默认是展开",
              "fieldName": "expanded"
            },
            {
              "name": "nodeRender",
              "type": {
                "text": "(node: OrgNodeDataType) => TemplateResult<1> | TemplateResult<1>[]"
              },
              "default": "defaultRoleRender",
              "description": "节点自定义渲染",
              "resolveInitializer": {
                "module": "src/components/org-node/org-node.ts"
              },
              "fieldName": "nodeRender"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-org-node",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultRoleRender",
          "declaration": {
            "name": "defaultRoleRender",
            "module": "src/components/org-node/org-node.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlOrgNode",
            "module": "src/components/org-node/org-node.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-org-node",
          "declaration": {
            "name": "SlOrgNode",
            "module": "src/components/org-node/org-node.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/org-tree/org-tree.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/org-tree/org-tree.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/org-tree/org-tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlOrgTree",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's container wrapper.",
              "name": "container"
            },
            {
              "description": "The component's tree wrapper.",
              "name": "tree"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rootData",
              "type": {
                "text": "OrgNodeDataType"
              },
              "description": "组织架构节点数据",
              "attribute": "rootData"
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否居中",
              "attribute": "center",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否是水平布局 组织架构",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nodeRender",
              "type": {
                "text": "(node: OrgNodeDataType) => TemplateResult<1> | TemplateResult<1>[]"
              },
              "default": "defaultRoleRender",
              "attribute": "nodeRender"
            },
            {
              "kind": "field",
              "name": "containerEl",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "SlOrgNode"
              }
            },
            {
              "kind": "method",
              "name": "handNodeEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ node: SlOrgNode,nodeData:OrgNodeDataType }"
              },
              "description": "Emitted when node click.",
              "name": "sl-org-tree-node-click"
            },
            {
              "type": {
                "text": "{ node: SlOrgNode,nodeData:OrgNodeDataType }"
              },
              "description": "Emitted when node toogle changed.",
              "name": "sl-org-tree-node-toogle"
            }
          ],
          "attributes": [
            {
              "name": "rootData",
              "type": {
                "text": "OrgNodeDataType"
              },
              "description": "组织架构节点数据",
              "fieldName": "rootData"
            },
            {
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否居中",
              "fieldName": "center"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否是水平布局 组织架构",
              "fieldName": "horizontal"
            },
            {
              "name": "nodeRender",
              "type": {
                "text": "(node: OrgNodeDataType) => TemplateResult<1> | TemplateResult<1>[]"
              },
              "default": "defaultRoleRender",
              "resolveInitializer": {
                "module": "/src/components/org-node/org-node"
              },
              "fieldName": "nodeRender"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-org-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlOrgTree",
            "module": "src/components/org-tree/org-tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-org-tree",
          "declaration": {
            "name": "SlOrgTree",
            "module": "src/components/org-tree/org-tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/page-btn/page-btn.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/page-btn/page-btn.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/page-btn/page-btn.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlPageBtn",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's to page button  wrapper.",
              "name": "pageWrap"
            }
          ],
          "slots": [
            {
              "description": "The prefix slot.",
              "name": "prefix"
            },
            {
              "description": "when total=0 to show .",
              "name": "no-data"
            },
            {
              "description": "tool bar end to show .",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "当前页",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "分页大小",
              "attribute": "page-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSizeChange",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否调整 分页大小 组件",
              "attribute": "show-size-change",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showPageChange",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许直接调整第几页",
              "attribute": "show-page-change",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "simple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许 简化分页模式",
              "attribute": "simple"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'left' | 'right' | 'center'"
              },
              "default": "'right'",
              "description": "布局对齐方式",
              "attribute": "align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "total",
              "type": {
                "text": "number"
              },
              "description": "总数大小",
              "attribute": "total",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pageSizeOptions",
              "type": {
                "text": "Array<Number>"
              },
              "description": "支持调整的分页大小"
            },
            {
              "kind": "field",
              "name": "showFirst",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否显示 直接跳转到第一页"
            },
            {
              "kind": "field",
              "name": "showLast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否显示 直接跳转到最后一页"
            },
            {
              "kind": "field",
              "name": "pageCount"
            },
            {
              "kind": "method",
              "name": "watchPageChange"
            },
            {
              "kind": "method",
              "name": "_renderSimple"
            },
            {
              "kind": "method",
              "name": "_renderPageButton"
            },
            {
              "kind": "method",
              "name": "_renderPage"
            },
            {
              "kind": "field",
              "name": "_eventDispose1",
              "type": {
                "text": "{\n    dispose: () => void;\n  }"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_eventDispose2",
              "type": {
                "text": "{\n    dispose: () => void;\n  }"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "goToPageByKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "pageKey",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "goToPage",
              "parameters": [
                {
                  "name": "pageNo",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when current page changed   .",
              "name": "sl-page-change"
            },
            {
              "description": "Emitted before  page changed,use can defaultPrevented ,then sl-page-change can not be emit    .",
              "name": "sl-page-before-change"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "当前页",
              "fieldName": "value"
            },
            {
              "name": "page-size",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "分页大小",
              "fieldName": "pageSize"
            },
            {
              "name": "show-size-change",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否调整 分页大小 组件",
              "fieldName": "showSizeChange"
            },
            {
              "name": "show-page-change",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许直接调整第几页",
              "fieldName": "showPageChange"
            },
            {
              "name": "simple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否允许 简化分页模式",
              "fieldName": "simple"
            },
            {
              "name": "align",
              "type": {
                "text": "'left' | 'right' | 'center'"
              },
              "default": "'right'",
              "description": "布局对齐方式",
              "fieldName": "align"
            },
            {
              "name": "total",
              "type": {
                "text": "number"
              },
              "description": "总数大小",
              "fieldName": "total"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-button,sl-select,sl-icon"
          ],
          "tagName": "sl-page-btn",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlPageBtn",
            "module": "src/components/page-btn/page-btn.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-page-btn",
          "declaration": {
            "name": "SlPageBtn",
            "module": "src/components/page-btn/page-btn.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/progress-bar/progress-bar.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlProgressBar",
          "cssProperties": [
            {
              "description": "The progress bar's height.",
              "name": "--height"
            },
            {
              "description": "The track color.",
              "name": "--track-color"
            },
            {
              "description": "The indicator color.",
              "name": "--indicator-color"
            },
            {
              "description": "The label color.",
              "name": "--label-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The progress bar indicator.",
              "name": "indicator"
            },
            {
              "description": "The progress bar label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the indicator.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Progress'",
              "description": "The progress bar's aria label.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "fieldName": "value"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
              "fieldName": "indeterminate"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Progress'",
              "description": "The progress bar's aria label.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-progress-bar",
          "declaration": {
            "name": "SlProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-ring/progress-ring.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/progress-ring/progress-ring.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-ring/progress-ring.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlProgressRing",
          "cssProperties": [
            {
              "description": "The diameter of the progress ring (cannot be a percentage).",
              "name": "--size"
            },
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The indicator color.",
              "name": "--indicator-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The progress ring label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the ring.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "SVGCircleElement"
              }
            },
            {
              "kind": "field",
              "name": "indicatorOffset",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Progress'",
              "description": "The progress ring's aria label.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Progress'",
              "description": "The progress ring's aria label.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-progress-ring",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlProgressRing",
            "module": "src/components/progress-ring/progress-ring.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-progress-ring",
          "declaration": {
            "name": "SlProgressRing",
            "module": "src/components/progress-ring/progress-ring.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/qr-code/qr-code.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/qr-code/qr-code.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/qr-code/qr-code.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlQrCode",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The QR code's value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label used when screen readers announce the code. If unspecified, the value will be used.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "description": "The size of the code's overall square in pixels.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'#000'",
              "description": "The fill color. This can be any valid CSS color, but not a CSS custom property.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "'#fff'",
              "description": "The background color. This can be any valid CSS color or `transparent`, but not a CSS custom property.",
              "attribute": "background"
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The edge radius of each module. Must be between 0 and 0.5.",
              "attribute": "radius"
            },
            {
              "kind": "field",
              "name": "errorCorrection",
              "type": {
                "text": "'L' | 'M' | 'Q' | 'H'"
              },
              "default": "'H'",
              "description": "The level of error correction to use.",
              "attribute": "error-correction"
            },
            {
              "kind": "method",
              "name": "generate"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The QR code's value.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label used when screen readers announce the code. If unspecified, the value will be used.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "description": "The size of the code's overall square in pixels.",
              "fieldName": "size"
            },
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'#000'",
              "description": "The fill color. This can be any valid CSS color, but not a CSS custom property.",
              "fieldName": "fill"
            },
            {
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "'#fff'",
              "description": "The background color. This can be any valid CSS color or `transparent`, but not a CSS custom property.",
              "fieldName": "background"
            },
            {
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The edge radius of each module. Must be between 0 and 0.5.",
              "fieldName": "radius"
            },
            {
              "name": "error-correction",
              "type": {
                "text": "'L' | 'M' | 'Q' | 'H'"
              },
              "default": "'H'",
              "description": "The level of error correction to use.",
              "fieldName": "errorCorrection"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-qr-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlQrCode",
            "module": "src/components/qr-code/qr-code.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-qr-code",
          "declaration": {
            "name": "SlQrCode",
            "module": "src/components/qr-code/qr-code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/radio/radio.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRadio",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The radio control.",
              "name": "control"
            },
            {
              "description": "The container the wraps the checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The radio label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`radio-${++id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`radio-label-${id}`"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The radio's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the radio in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the radio."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the radio."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "getAllRadios"
            },
            {
              "kind": "method",
              "name": "getSiblingRadios"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "hasSlotLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "slotChangeHandler",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The radio's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the radio in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRadio",
            "module": "src/components/radio/radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio",
          "declaration": {
            "name": "SlRadio",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/radio-group/radio-group.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRadioGroup",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The radio group label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The default slot where radio controls are placed.",
              "name": ""
            },
            {
              "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label prop.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "fieldset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the fieldset and legend that surrounds the radio group.",
              "attribute": "fieldset"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown"
              },
              "description": "选中值",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "handleFocusIn"
            },
            {
              "kind": "field",
              "name": "allRadios"
            },
            {
              "kind": "method",
              "name": "valueChange"
            },
            {
              "kind": "field",
              "name": "_eventHandler",
              "type": {
                "text": "DisposeObject"
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the radio selected changed.",
              "name": "sl-check-change"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
              "fieldName": "label"
            },
            {
              "name": "fieldset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the fieldset and legend that surrounds the radio group.",
              "fieldName": "fieldset"
            },
            {
              "name": "value",
              "type": {
                "text": "unknown"
              },
              "description": "选中值",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRadioGroup",
            "module": "src/components/radio-group/radio-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-group",
          "declaration": {
            "name": "SlRadioGroup",
            "module": "src/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/range/range.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/range/range.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/range/range.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRange",
          "cssProperties": [
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            },
            {
              "description": "The vertical distance the tooltip is offset from the track.",
              "name": "--tooltip-offset"
            },
            {
              "description": "The color of the portion of the track that represents the current value.",
              "name": "--track-color-active"
            },
            {
              "description": "The of the portion of the track that represents the remaining value.",
              "name": "--track-color-inactive:"
            },
            {
              "description": "The height of the track.",
              "name": "--track-height:"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The native range input.",
              "name": "input"
            },
            {
              "description": "The range tooltip.",
              "name": "tooltip"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the input. Alternatively, you can use the help-text prop.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "output",
              "type": {
                "text": "HTMLOutputElement"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`input-${++id}`"
            },
            {
              "kind": "field",
              "name": "helpTextId",
              "privacy": "private",
              "default": "`input-help-text-${id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`input-label-${id}`"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHelpTextSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasLabelSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's label. Alternatively, you can use the label slot.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's help text. Alternatively, you can use the help-text slot.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's min attribute.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The input's max attribute.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The input's step attribute.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "'top' | 'bottom' | 'none'"
              },
              "default": "'top'",
              "description": "The preferred placedment of the tooltip.",
              "attribute": "tooltip"
            },
            {
              "kind": "field",
              "name": "tooltipFormatter",
              "type": {
                "text": "(value: number) => string"
              },
              "default": "(value: number) => value.toString()",
              "description": "A function used to format the tooltip's value."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleThumbDragStart"
            },
            {
              "kind": "method",
              "name": "handleThumbDragEnd"
            },
            {
              "kind": "method",
              "name": "syncRange"
            },
            {
              "kind": "method",
              "name": "syncProgress",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncTooltip",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's label. Alternatively, you can use the label slot.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's help text. Alternatively, you can use the help-text slot.",
              "fieldName": "helpText"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "fieldName": "invalid"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's min attribute.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The input's max attribute.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The input's step attribute.",
              "fieldName": "step"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "'top' | 'bottom' | 'none'"
              },
              "default": "'top'",
              "description": "The preferred placedment of the tooltip.",
              "fieldName": "tooltip"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-range",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRange",
            "module": "src/components/range/range.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-range",
          "declaration": {
            "name": "SlRange",
            "module": "src/components/range/range.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/rating/rating.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRating",
          "cssProperties": [
            {
              "description": "The inactive color for symbols.",
              "name": "--symbol-color"
            },
            {
              "description": "The active color for symbols.",
              "name": "--symbol-color-active"
            },
            {
              "description": "The size of symbols.",
              "name": "--symbol-size"
            },
            {
              "description": "The spacing to use around symbols.",
              "name": "--symbol-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current rating.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The highest rating to show.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The minimum increment value allowed by the control.",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the rating readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the rating.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "default": "(value: number) => '<sl-icon name=\"star-fill\" library=\"system\"></sl-icon>'",
              "description": "The name of the icon to display as the symbol.",
              "attribute": "getSymbol"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the rating."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the rating."
            },
            {
              "kind": "method",
              "name": "getValueFromMousePosition",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromTouchPosition",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromXCoordinate",
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseEnter"
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseLeave"
            },
            {
              "kind": "method",
              "name": "handleTouchStart",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchEnd",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "roundToPrecision",
              "parameters": [
                {
                  "name": "numberToRound",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "default": "0.5"
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the rating's value changes.",
              "name": "sl-change"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current rating.",
              "fieldName": "value"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The highest rating to show.",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The minimum increment value allowed by the control.",
              "fieldName": "precision"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the rating readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the rating.",
              "fieldName": "disabled"
            },
            {
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "default": "(value: number) => '<sl-icon name=\"star-fill\" library=\"system\"></sl-icon>'",
              "description": "The name of the icon to display as the symbol.",
              "fieldName": "getSymbol"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRating",
            "module": "src/components/rating/rating.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-rating",
          "declaration": {
            "name": "SlRating",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/relative-time/relative-time.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRelativeTime",
          "members": [
            {
              "kind": "field",
              "name": "updateTimeout",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isoTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "relativeTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "titleTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "description": "The date from which to calculate time from.",
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The formatting style to use.",
              "attribute": "format"
            },
            {
              "kind": "field",
              "name": "numeric",
              "type": {
                "text": "'always' | 'auto'"
              },
              "default": "'auto'",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
              "attribute": "numeric"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keep the displayed value up to date as time passes.",
              "attribute": "sync"
            },
            {
              "kind": "method",
              "name": "updateTime"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "description": "The date from which to calculate time from.",
              "fieldName": "date"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "description": "The locale to use when formatting the number.",
              "fieldName": "locale"
            },
            {
              "name": "format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The formatting style to use.",
              "fieldName": "format"
            },
            {
              "name": "numeric",
              "type": {
                "text": "'always' | 'auto'"
              },
              "default": "'auto'",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
              "fieldName": "numeric"
            },
            {
              "name": "sync",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keep the displayed value up to date as time passes.",
              "fieldName": "sync"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-relative-time",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRelativeTime",
            "module": "src/components/relative-time/relative-time.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-relative-time",
          "declaration": {
            "name": "SlRelativeTime",
            "module": "src/components/relative-time/relative-time.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-observer/resize-observer.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/resize-observer/resize-observer.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-observer/resize-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlResizeObserver",
          "slots": [
            {
              "description": "One or more elements to watch for resizing.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "startObserver"
            },
            {
              "kind": "method",
              "name": "stopObserver"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ entries: ResizeObserverEntry[] }"
              },
              "description": "Emitted when the element is resized.",
              "name": "sl-resize"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-resize-observer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlResizeObserver",
            "module": "src/components/resize-observer/resize-observer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-resize-observer",
          "declaration": {
            "name": "SlResizeObserver",
            "module": "src/components/resize-observer/resize-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/responsive-media/responsive-media.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/responsive-media/responsive-media.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/responsive-media/responsive-media.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlResponsiveMedia",
          "slots": [
            {
              "description": "The element to receive the aspect ratio. Should be a replaced element, such as `<img>`, `<iframe>`, or `<video>`.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "aspectRatio",
              "type": {
                "text": "string"
              },
              "default": "'16:9'",
              "description": "The aspect ratio of the embedded media in the format of `width:height`, e.g. `16:9`, `4:3`, or `1:1`. Ratios not in\nthis format will be ignored.",
              "attribute": "aspect-ratio"
            },
            {
              "kind": "field",
              "name": "fit",
              "type": {
                "text": "'cover' | 'contain'"
              },
              "default": "'cover'",
              "description": "Determines how content will be resized to fit its container.",
              "attribute": "fit"
            }
          ],
          "attributes": [
            {
              "name": "aspect-ratio",
              "type": {
                "text": "string"
              },
              "default": "'16:9'",
              "description": "The aspect ratio of the embedded media in the format of `width:height`, e.g. `16:9`, `4:3`, or `1:1`. Ratios not in\nthis format will be ignored.",
              "fieldName": "aspectRatio"
            },
            {
              "name": "fit",
              "type": {
                "text": "'cover' | 'contain'"
              },
              "default": "'cover'",
              "description": "Determines how content will be resized to fit its container.",
              "fieldName": "fit"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-responsive-media",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlResponsiveMedia",
            "module": "src/components/responsive-media/responsive-media.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-responsive-media",
          "declaration": {
            "name": "SlResponsiveMedia",
            "module": "src/components/responsive-media/responsive-media.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ripple/ripple.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ripple/ripple.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ripple/ripple.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "RIPPLE_ANIMATION_CONFIG",
          "type": {
            "text": "KeyframeAnimationOptions"
          },
          "default": "{\n  easing: 'ease-out',\n  fill: 'both'\n}",
          "description": "Base configuration for the ripple animation."
        },
        {
          "kind": "function",
          "name": "computeRadius",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "RIPPLE_INITIAL_DURATION",
          "type": {
            "text": "number"
          },
          "default": "350",
          "description": "Initial animation duration."
        },
        {
          "kind": "variable",
          "name": "RIPPLE_RELEASE_DURATION",
          "type": {
            "text": "number"
          },
          "default": "500",
          "description": "Release animation duration."
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlRipple",
          "cssProperties": [
            {
              "description": "Color.",
              "name": "--ripple-color"
            },
            {
              "description": "Opacity.",
              "name": "--ripple-opacity"
            },
            {
              "description": "An ripple animate background color",
              "name": "--sl-ripple-color"
            }
          ],
          "slots": [
            {
              "description": "The default slot wrap node for ripplie effect.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "unbounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the ripple visible outside the bounds.",
              "attribute": "unbounded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes ripple appear from the center.",
              "attribute": "centered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Overlays the ripple.",
              "attribute": "overlay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ripple.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows focusin to spawn a ripple.",
              "attribute": "focusable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autoRelease",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Releases the ripple after it has been spawned.",
              "attribute": "autoRelease",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "initialDuration",
              "type": {
                "text": "number"
              },
              "default": "350",
              "description": "Initial animation duration.",
              "attribute": "initialDuration"
            },
            {
              "kind": "field",
              "name": "releaseDuration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Fade out animation duration.",
              "attribute": "releaseDuration"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "AriaRole"
              },
              "default": "'presentation'",
              "description": "Role of the ripple.",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "EventTarget"
              },
              "default": "this",
              "description": "Target for the spawn ripple events.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "listeners",
              "type": {
                "text": "Array<DisposeObject>"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rippleAnimationListeners",
              "type": {
                "text": "Array<DisposeObject>"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "changeTarget"
            },
            {
              "kind": "method",
              "name": "firstUpdate",
              "parameters": [
                {
                  "name": "map",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocusIn",
              "privacy": "protected",
              "description": "Add a persistent ripple when the taget gains focus."
            },
            {
              "kind": "method",
              "name": "onFocusOut",
              "privacy": "protected",
              "description": "Release the current ripple when the focus is lost from the target."
            },
            {
              "kind": "method",
              "name": "releaseRipple"
            },
            {
              "kind": "method",
              "name": "spawnRipple",
              "return": {
                "type": {
                  "text": "DisposeObject"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent | TouchEvent"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "Partial<IRippleConfig>"
                  }
                }
              ],
              "description": "Handles the mouse down events and spawns a ripple.\nIf no event is provided the ripple will spawn in the center."
            },
            {
              "kind": "method",
              "name": "showRipple"
            },
            {
              "kind": "method",
              "name": "showRippleAtCoords",
              "parameters": [
                {
                  "name": "{ x, y }",
                  "type": {
                    "text": "{ x: number; y: number }"
                  }
                },
                {
                  "name": "config",
                  "optional": true,
                  "type": {
                    "text": "Partial<IRippleConfig>"
                  }
                },
                {
                  "name": "number"
                }
              ],
              "description": "Shows a ripple at a specific coordinate."
            }
          ],
          "events": [
            {
              "description": "Emitted when ripple effect end",
              "name": "sl-ripple-end"
            }
          ],
          "attributes": [
            {
              "name": "unbounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the ripple visible outside the bounds.",
              "fieldName": "unbounded",
              "attribute": "unbounded"
            },
            {
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes ripple appear from the center.",
              "fieldName": "centered",
              "attribute": "centered"
            },
            {
              "name": "overlay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Overlays the ripple.",
              "fieldName": "overlay",
              "attribute": "overlay"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ripple.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "focusable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows focusin to spawn a ripple.",
              "fieldName": "focusable",
              "attribute": "focusable"
            },
            {
              "name": "autoRelease",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Releases the ripple after it has been spawned.",
              "fieldName": "autoRelease",
              "attribute": "autoRelease"
            },
            {
              "name": "initialDuration",
              "type": {
                "text": "number"
              },
              "default": "RIPPLE_INITIAL_DURATION",
              "description": "Initial animation duration.",
              "resolveInitializer": {
                "module": "src/components/ripple/ripple.ts"
              },
              "fieldName": "initialDuration",
              "attribute": "initialDuration"
            },
            {
              "name": "releaseDuration",
              "type": {
                "text": "number"
              },
              "default": "RIPPLE_RELEASE_DURATION",
              "description": "Fade out animation duration.",
              "resolveInitializer": {
                "module": "src/components/ripple/ripple.ts"
              },
              "fieldName": "releaseDuration",
              "attribute": "releaseDuration"
            },
            {
              "name": "role",
              "type": {
                "text": "AriaRole"
              },
              "default": "'presentation'",
              "description": "Role of the ripple.",
              "fieldName": "role",
              "attribute": "role"
            },
            {
              "name": "target",
              "type": {
                "text": "EventTarget"
              },
              "default": "this",
              "description": "Target for the spawn ripple events.",
              "fieldName": "target",
              "attribute": "target"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-ripple",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RIPPLE_ANIMATION_CONFIG",
          "declaration": {
            "name": "RIPPLE_ANIMATION_CONFIG",
            "module": "src/components/ripple/ripple.ts"
          }
        },
        {
          "kind": "js",
          "name": "computeRadius",
          "declaration": {
            "name": "computeRadius",
            "module": "src/components/ripple/ripple.ts"
          }
        },
        {
          "kind": "js",
          "name": "RIPPLE_INITIAL_DURATION",
          "declaration": {
            "name": "RIPPLE_INITIAL_DURATION",
            "module": "src/components/ripple/ripple.ts"
          }
        },
        {
          "kind": "js",
          "name": "RIPPLE_RELEASE_DURATION",
          "declaration": {
            "name": "RIPPLE_RELEASE_DURATION",
            "module": "src/components/ripple/ripple.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRipple",
            "module": "src/components/ripple/ripple.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-ripple",
          "declaration": {
            "name": "SlRipple",
            "module": "src/components/ripple/ripple.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/router/cryptoHashResovle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CryptoHashResovle",
          "type": {
            "text": "ResovlePathInterface"
          },
          "default": "{\n  resolvePath(hash) {\n    if (hash.length > 1 && hash.substr(0, 1) == '#') {\n      hash = hash.slice(1); //#,去掉\n    }\n    const decryptData = unWrapData(hash);\n    return defaultResove.resolvePath(decryptData);\n  },\n  toPath(url, jsonData) {\n    const result = defaultResove.toPath(url, jsonData);\n    const enryptText = wrapData(result);\n    return enryptText;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CryptoHashResovle",
          "declaration": {
            "name": "CryptoHashResovle",
            "module": "src/components/router/cryptoHashResovle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/router/pathResovle.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stripExtraTrailingSlash",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "去掉路径最后面的 '/',如果路径不是/开始，则添加'/'到最前面,连续多个'/' 则被替换为一个'/'",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "joinStringPath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getQueryData",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "queryString",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "查询字符串 ，类似 'a=b&c=d&asd=d'"
            }
          ],
          "description": "将查询字符串 转换为 json Object"
        },
        {
          "kind": "function",
          "name": "toQueryString",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "ParamterData"
              },
              "description": "jsonObject"
            }
          ],
          "description": "将 json data 转化为queryString",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isPathURLMatchPattern",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "判断路径 path ,是否匹配pattern 路径",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "getPathNames",
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "defaultResove",
          "type": {
            "text": "ResovlePathInterface"
          },
          "default": "{\n  resolvePath: (hash: string) => {\n    hash = decodeURI(hash);\n    let hashPath = '/';\n    if (hash.length > 1 && hash.substr(0, 1) == '#') {\n      hash = hash.slice(1); //#,去掉\n    }\n    let indexStart = hash.indexOf('?');\n    let queryString = '';\n    if (indexStart != -1) {\n      hashPath = hash.slice(0, indexStart);\n      hashPath = stripExtraTrailingSlash(hashPath);\n      queryString = hash.slice(hash.indexOf('?') + 1);\n    } else {\n      hashPath = stripExtraTrailingSlash(hash);\n      queryString = '';\n    }\n    return {\n      path: hashPath,\n      queryString: queryString,\n      queryData: queryString ? getQueryData(queryString) : {}\n    };\n  },\n  toPath: (url: string, jsonData: PathNameResult) => {\n    const queryString = toQueryString(jsonData);\n    const toPath = compile(url, {\n      validate: false,\n      encode: encodeURIComponent\n    });\n    const src = toPath(jsonData);\n    return stripExtraTrailingSlash(src) + (queryString ? '?' + queryString : '');\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPathURLMatchPattern",
          "declaration": {
            "name": "isPathURLMatchPattern",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPathNames",
          "declaration": {
            "name": "getPathNames",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "getQueryData",
          "declaration": {
            "name": "getQueryData",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "toQueryString",
          "declaration": {
            "name": "toQueryString",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "stripExtraTrailingSlash",
          "declaration": {
            "name": "stripExtraTrailingSlash",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "joinStringPath",
          "declaration": {
            "name": "joinStringPath",
            "module": "src/components/router/pathResovle.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultResove",
          "declaration": {
            "name": "defaultResove",
            "module": "src/components/router/pathResovle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/router/router-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRouterLink",
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "external",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "routerName",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "PathNameResult"
              }
            },
            {
              "kind": "field",
              "name": "router",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "goToLink",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "emit before router",
              "name": "sl-router-link-before"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "fieldName": "src"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-router-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRouterLink",
            "module": "src/components/router/router-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-router-link",
          "declaration": {
            "name": "SlRouterLink",
            "module": "src/components/router/router-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/router/router.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getRouterByName",
          "parameters": [
            {
              "name": "name",
              "default": "'default'",
              "type": {
                "text": "string"
              },
              "description": ",路由名称，默认为default"
            }
          ],
          "description": "根据路由名称，获取路由"
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlRouter",
          "slots": [
            {
              "description": "The default slot:路由出口.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "设置路由名称",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "routers",
              "type": {
                "text": "RouterItem[]"
              },
              "description": "设置路由路径"
            },
            {
              "kind": "method",
              "name": "watchRoutersChange"
            },
            {
              "kind": "method",
              "name": "watchNameChange",
              "parameters": [
                {
                  "name": "oldName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "beforeRouter",
              "type": {
                "text": "(to: { item: RouterItem; data: RouterContextData }, from: { item: RouterItem; data: RouterContextData } | undefined, next: () => void) => void"
              },
              "description": "before Router"
            },
            {
              "kind": "field",
              "name": "afterRouter",
              "type": {
                "text": "(to: { item: RouterItem; data: RouterContextData }, from: { item: RouterItem; data: RouterContextData } | undefined) => void"
              },
              "description": "after Router"
            },
            {
              "kind": "field",
              "name": "_lastRouterItem",
              "type": {
                "text": "RouterItem"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastRouterData",
              "type": {
                "text": "RouterContextData"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_routerItem",
              "type": {
                "text": "RouterItem"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_routerData",
              "type": {
                "text": "RouterContextData"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "routerItem",
              "privacy": "public",
              "description": "获取当前匹配路由"
            },
            {
              "kind": "field",
              "name": "routerData",
              "privacy": "public",
              "description": "获取当前匹配路由数据"
            },
            {
              "kind": "field",
              "name": "lastRouterItem",
              "privacy": "public",
              "description": "上一次匹配路由"
            },
            {
              "kind": "field",
              "name": "lastRouterData",
              "privacy": "public",
              "description": "上一次匹配路由数据"
            },
            {
              "kind": "field",
              "name": "pathResovle",
              "type": {
                "text": "ResovlePathInterface"
              },
              "default": "defaultResove",
              "description": "设置路径解析器"
            },
            {
              "kind": "method",
              "name": "getCurrentPath",
              "description": "获取当前导航数据",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "toHashPath",
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  },
                  "description": "路径,例如/user/list, /user/1000, /user/100?id=2223,"
                },
                {
                  "name": "jsonData",
                  "optional": true,
                  "type": {
                    "text": "PathNameResult"
                  },
                  "description": "参数 例如 {a:'1',b:'2'}"
                }
              ],
              "description": "将url 和 jsonData 转为hash 路径,并且进行导航"
            },
            {
              "kind": "method",
              "name": "findMathRouterItems",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "HASH_EVENT_BEFORE",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "default": "'hash-router-before'"
            },
            {
              "kind": "field",
              "name": "HASH_EVENT_AFTER",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "default": "'hash-router-after'"
            },
            {
              "kind": "method",
              "name": "excuteRouterComponenent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "matchItems",
                  "type": {
                    "text": "RouterItem[]"
                  },
                  "description": "当前匹配的路径路径"
                },
                {
                  "name": "pattern",
                  "type": {
                    "text": "string"
                  },
                  "description": "当前路由pattern 值"
                }
              ],
              "description": "处理路由匹配"
            },
            {
              "kind": "field",
              "name": "routerChangeHanlder",
              "privacy": "protected",
              "default": "() => {\n    const event = emit(this, SlRouter.HASH_EVENT_BEFORE, {\n      cancelable: true,\n      detail: {\n        lastItem: this.lastRouterItem,\n        data: this.lastRouterData\n      }\n    });\n    if (event.defaultPrevented) {\n      emit(this, 'hash-prevented');\n      return;\n    }\n    const matchResult = this.findMathRouterItems();\n    if (matchResult) {\n      const matchItems = matchResult.items;\n      const pattern = matchResult.url;\n      const item = matchItems[matchItems.length - 1];\n      const currentPath = this.getCurrentPath();\n      const currentData = {\n        ...currentPath,\n        pathData: getPathNames(currentPath.path, pattern) || {}\n      } as RouterContextData;\n      this.beforeRouter\n        ? this.beforeRouter({ item: item, data: currentData }, this.routerItem ? { item: this.routerItem, data: this.routerData } : undefined, async () => {\n            this.excuteRouterComponenent(matchItems, pattern);\n          })\n        : this.excuteRouterComponenent(matchItems, pattern);\n    } else {\n      emit(this, 'not-found');\n    }\n  }"
            },
            {
              "kind": "field",
              "default": "this"
            }
          ],
          "events": [
            {
              "description": "emit before router,user can prevent router",
              "name": "hash-router-before"
            },
            {
              "description": "emit after router",
              "name": "hash-router-after"
            },
            {
              "description": "emit when router is prevented",
              "name": "hash-prevented"
            },
            {
              "description": "emit when router not found",
              "name": "not-found"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "设置路由名称",
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-router",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRouterByName",
          "declaration": {
            "name": "getRouterByName",
            "module": "src/components/router/router.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRouter",
            "module": "src/components/router/router.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-router",
          "declaration": {
            "name": "SlRouter",
            "module": "src/components/router/router.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/row/col.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCol",
          "members": [
            {
              "kind": "field",
              "name": "span",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "占多少列",
              "attribute": "span",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "row",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "占多少行",
              "attribute": "row",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "changeSpanMethod"
            }
          ],
          "attributes": [
            {
              "name": "span",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "占多少列",
              "fieldName": "span"
            },
            {
              "name": "row",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "占多少行",
              "fieldName": "row"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-col",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCol",
            "module": "src/components/row/col.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-col",
          "declaration": {
            "name": "SlCol",
            "module": "src/components/row/col.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/row/row.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/row/row.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/row/row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRow",
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "grid等分多少列",
              "attribute": "columns"
            },
            {
              "kind": "field",
              "name": "grap",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "grid 单元格的间距",
              "attribute": "grap"
            },
            {
              "kind": "method",
              "name": "changeSpanMethod"
            }
          ],
          "attributes": [
            {
              "name": "columns",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "grid等分多少列",
              "fieldName": "columns"
            },
            {
              "name": "grap",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "grid 单元格的间距",
              "fieldName": "grap"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRow",
            "module": "src/components/row/row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-row",
          "declaration": {
            "name": "SlRow",
            "module": "src/components/row/row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/scroll/scroll.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/scroll/scroll.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/scroll/scroll.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlScroll",
          "cssProperties": [
            {
              "description": "scroll bar width.",
              "name": "--scroll-bar-width"
            },
            {
              "description": "scroll bar-outer width.",
              "name": "--scroll-bar-outer-width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's  scroll div.",
              "name": "content"
            },
            {
              "description": "The component's slot wrapper.",
              "name": "content-wrap"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "overflowX",
              "type": {
                "text": "overflowType"
              },
              "default": "''",
              "description": "hidden,则水平滚动条永远隐藏，否则根据内容自动显示隐藏",
              "attribute": "overflow-x",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overflowY",
              "type": {
                "text": "overflowType"
              },
              "default": "''",
              "description": "hidden,则竖直滚动条隐藏，，否则根据内容自动显示隐藏",
              "attribute": "overflow-y",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "keyEnable",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否允许 键盘 上下左右按键滚动",
              "attribute": "keyEnable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollBarWidth",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "滚动条宽度",
              "attribute": "scroll-bar-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollBarOutWidth",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "滚动条 容器宽度，必须大与 滚动条宽度",
              "attribute": "scroll-bar-out-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minScrollSize",
              "type": {
                "text": "number"
              },
              "default": "20"
            },
            {
              "kind": "field",
              "name": "scrollItemValue",
              "type": {
                "text": "number"
              },
              "default": "30",
              "description": "定义滚动值大小"
            },
            {
              "kind": "method",
              "name": "_wheelHander",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "WheelEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_touchStartX",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_touchStartY",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_touchStartHanlder",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_touchMoveHanlder",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "rightBottom",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "contentDIV",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "content_wrap_DIV",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "containerDIV",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "partYScroll",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "partYHandler",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "partXScroll",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "partXHandler",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_obersver",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isMouseOn",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_MouseOnEventHandler",
              "type": {
                "text": "EventListener"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_MouseOutEventHandler",
              "type": {
                "text": "EventListener"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_docEventHandler",
              "type": {
                "text": "EventListener"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_initScrollBarEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_intiKeyEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeDispachFun",
              "type": {
                "text": "() => void"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resize",
              "description": "当容器，或者子元素发生变化，触发resize 函数和事件"
            },
            {
              "kind": "field",
              "name": "caculateYBarHeight"
            },
            {
              "kind": "field",
              "name": "caculateXBarWidth"
            },
            {
              "kind": "method",
              "name": "caculateYBarPosition"
            },
            {
              "kind": "method",
              "name": "caculateXBarPosition"
            },
            {
              "kind": "field",
              "name": "_yDispatchMethod",
              "type": {
                "text": "(oldValue: number, newValue: number) => void | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_xDispatchMethod",
              "type": {
                "text": "(oldValue: number, newValue: number) => void | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "xDispatchMethod",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "yDispatchMethod",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_emitEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "eventName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "obj",
                  "optional": true,
                  "type": {
                    "text": "{}"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_scrollDispatchMethod",
              "type": {
                "text": "() => void | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "scrollDispatchMethod",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_scrollEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "changeYScroll",
              "parameters": [
                {
                  "name": "scrollValue",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "改变竖直内容滚动位置"
                }
              ]
            },
            {
              "kind": "field",
              "name": "throttTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "20",
              "description": "事件节流时间",
              "attribute": "throttTime"
            },
            {
              "kind": "method",
              "name": "changeXScroll",
              "parameters": [
                {
                  "name": "scrollValue",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "改变多少"
                }
              ],
              "description": "改变水平内容滚动位置"
            },
            {
              "kind": "method",
              "name": "changeYBarPosition",
              "parameters": [
                {
                  "name": "changeValue",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "竖直滚动条的改变值，>0 向下"
                }
              ],
              "description": "改变竖直滚动调大位置"
            },
            {
              "kind": "method",
              "name": "changeXBarPosition",
              "parameters": [
                {
                  "name": "changeValue",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "改变的大小"
                }
              ],
              "description": "改变水平滚动条的位置"
            },
            {
              "kind": "method",
              "name": "scrollYToEnd",
              "description": "竖直滚动条 滚动到底部"
            },
            {
              "kind": "method",
              "name": "scrollYToValue",
              "parameters": [
                {
                  "name": "scrollTop",
                  "default": "0",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "竖直内容滚动到特定位置"
            },
            {
              "kind": "method",
              "name": "scrollXToEnd",
              "description": "水平滚动条滚动到 最右侧"
            },
            {
              "kind": "method",
              "name": "scrollXToValue",
              "parameters": [
                {
                  "name": "scrollLeft",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "水平内容滚动到特定位置"
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{scrollLeft:number,scrollTop:number,value:number}"
              },
              "description": "Emitted when scroll y bar .",
              "name": "sl-scroll-y"
            },
            {
              "type": {
                "text": "{scrollLeft:number,scrollTop:number,value:number}"
              },
              "description": "Emitted when scroll x bar .",
              "name": "sl-scroll-x"
            },
            {
              "type": {
                "text": "{scrollLeft:number,scrollTop:number}"
              },
              "description": "Emitted when scroll y bar to end .",
              "name": "sl-scroll-y-end"
            },
            {
              "type": {
                "text": "{scrollLeft:number,scrollTop:number}"
              },
              "description": "Emitted when scroll x bar to end .",
              "name": "sl-scroll-x-end"
            },
            {
              "type": {
                "text": "{scrollLeft:number,scrollTop:number}"
              },
              "description": "Emitted when scroll  bar change .",
              "name": "sl-scroll-change"
            },
            {
              "description": "Emitted when component size  change",
              "name": "resize"
            }
          ],
          "attributes": [
            {
              "name": "overflow-x",
              "type": {
                "text": "overflowType"
              },
              "default": "''",
              "description": "hidden,则水平滚动条永远隐藏，否则根据内容自动显示隐藏",
              "fieldName": "overflowX"
            },
            {
              "name": "overflow-y",
              "type": {
                "text": "overflowType"
              },
              "default": "''",
              "description": "hidden,则竖直滚动条隐藏，，否则根据内容自动显示隐藏",
              "fieldName": "overflowY"
            },
            {
              "name": "keyEnable",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否允许 键盘 上下左右按键滚动",
              "fieldName": "keyEnable"
            },
            {
              "name": "scroll-bar-width",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "滚动条宽度",
              "fieldName": "scrollBarWidth"
            },
            {
              "name": "scroll-bar-out-width",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "滚动条 容器宽度，必须大与 滚动条宽度",
              "fieldName": "scrollBarOutWidth"
            },
            {
              "name": "throttTime",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "事件节流时间",
              "fieldName": "throttTime"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "undefined"
          ],
          "tagName": "sl-scroll",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlScroll",
            "module": "src/components/scroll/scroll.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-scroll",
          "declaration": {
            "name": "SlScroll",
            "module": "src/components/scroll/scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/select/select.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSelect",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that holds the prefix, label, and suffix.",
              "name": "control"
            },
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The select's help text.",
              "name": "help-text"
            },
            {
              "description": "The select's icon.",
              "name": "icon"
            },
            {
              "description": "The select's prefix.",
              "name": "prefix"
            },
            {
              "description": "The select's label.",
              "name": "label"
            },
            {
              "description": "The select's suffix.",
              "name": "suffix"
            },
            {
              "description": "The select menu, an <sl-menu> element.",
              "name": "menu"
            },
            {
              "description": "The multiselect option, an <sl-tag> element.",
              "name": "tag"
            },
            {
              "description": "The container in which multiselect options are rendered.",
              "name": "tags"
            }
          ],
          "slots": [
            {
              "description": "The select's options in the form of menu items.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the select.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the select.",
              "name": "suffix"
            },
            {
              "description": "The select's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the select.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "SlMenu"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`select-${++id}`"
            },
            {
              "kind": "field",
              "name": "helpTextId",
              "privacy": "private",
              "default": "`select-help-text-${id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`select-label-${id}`"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHelpTextSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasLabelSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "displayTags",
              "type": {
                "text": "TemplateResult[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables multiselect. With this enabled, value will be an array.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxTagsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
              "attribute": "max-tags-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's name.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | Array<string | number>"
              },
              "description": "The value of the control. This will be a string or an array depending on `multiple`.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The select's label. Alternatively, you can use the label slot.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "description": "The select's help text. Alternatively, you can use the help-text slot.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is populated.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "getItemLabel",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "SlMenuItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItems"
            },
            {
              "kind": "method",
              "name": "getValueAsArray"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLabelClick"
            },
            {
              "kind": "method",
              "name": "handleMenuSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMenuShow"
            },
            {
              "kind": "method",
              "name": "handleMenuHide"
            },
            {
              "kind": "method",
              "name": "handleMultipleChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleTagInteraction",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent | MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "resizeMenu"
            },
            {
              "kind": "method",
              "name": "syncItemsFromValue"
            },
            {
              "kind": "method",
              "name": "syncValueFromItems"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the clear button is activated.",
              "name": "sl-clear"
            },
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            }
          ],
          "attributes": [
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables multiselect. With this enabled, value will be an array.",
              "fieldName": "multiple"
            },
            {
              "name": "max-tags-visible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
              "fieldName": "maxTagsVisible"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's name.",
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "fieldName": "size"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            },
            {
              "name": "value",
              "type": {
                "text": "string | number | Array<string | number>"
              },
              "description": "The value of the control. This will be a string or an array depending on `multiple`.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The select's label. Alternatively, you can use the label slot.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "description": "The select's help text. Alternatively, you can use the help-text slot.",
              "fieldName": "helpText"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is populated.",
              "fieldName": "clearable"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-dropdown",
            "sl-icon",
            "sl-icon-button",
            "sl-menu",
            "sl-tag"
          ],
          "tagName": "sl-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSelect",
            "module": "src/components/select/select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "SlSelect",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/skeleton/skeleton.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSkeleton",
          "cssProperties": [
            {
              "description": "The skeleton's border radius.",
              "name": "--border-radius"
            },
            {
              "description": "The color of the skeleton.",
              "name": "--color"
            },
            {
              "description": "The sheen color when the skeleton is in its loading state.",
              "name": "--sheen-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The skeleton's indicator which is responsible for its color and animation.",
              "name": "indicator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'none'",
              "description": "Determines which effect the skeleton will use.",
              "attribute": "effect"
            }
          ],
          "attributes": [
            {
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'none'",
              "description": "Determines which effect the skeleton will use.",
              "fieldName": "effect"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-skeleton",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSkeleton",
            "module": "src/components/skeleton/skeleton.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-skeleton",
          "declaration": {
            "name": "SlSkeleton",
            "module": "src/components/skeleton/skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/spinner/spinner.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/spinner/spinner.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/spinner/spinner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSpinner",
          "cssProperties": [
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The color of the indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The time it takes for the spinner to complete one animation cycle.",
              "name": "--speed"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-spinner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-spinner",
          "declaration": {
            "name": "SlSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitter/splitter.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/splitter/splitter.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitter/splitter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSplitter",
          "cssProperties": [
            {
              "description": "spit div width.",
              "name": "--sl-split-width"
            },
            {
              "description": "spit div hover color.",
              "name": "--sl-split-hover-color-"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's base exta wrapper.",
              "name": "exta"
            },
            {
              "description": "The component's base main wrapper.",
              "name": "main"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "需要被拖动的小部分容器.",
              "name": "exta"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "splitType",
              "type": {
                "text": "'left' | 'right' | 'top' | 'bottom'"
              },
              "default": "'left'",
              "description": "Split 切割位置.",
              "attribute": "splitType"
            },
            {
              "kind": "field",
              "name": "splitAble",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否允许拖动改变位置",
              "attribute": "split-able"
            },
            {
              "kind": "field",
              "name": "minSize",
              "type": {
                "text": "number | undefined"
              },
              "description": "分隔允许的最小位置",
              "attribute": "min-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxSize",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "max-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "整体是否显示边框",
              "attribute": "border"
            },
            {
              "kind": "method",
              "name": "changeSplitType",
              "parameters": [
                {
                  "name": "old",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{size:number}"
              },
              "description": "Emitted when split value .",
              "name": "sl-splitter-change"
            }
          ],
          "attributes": [
            {
              "name": "splitType",
              "type": {
                "text": "'left' | 'right' | 'top' | 'bottom'"
              },
              "default": "'left'",
              "description": "Split 切割位置.",
              "fieldName": "splitType"
            },
            {
              "name": "split-able",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否允许拖动改变位置",
              "fieldName": "splitAble"
            },
            {
              "name": "min-size",
              "type": {
                "text": "number | undefined"
              },
              "description": "分隔允许的最小位置",
              "fieldName": "minSize"
            },
            {
              "name": "max-size",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "maxSize"
            },
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "整体是否显示边框",
              "fieldName": "border"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-splitter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSplitter",
            "module": "src/components/splitter/splitter.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-splitter",
          "declaration": {
            "name": "SlSplitter",
            "module": "src/components/splitter/splitter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/step/step.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/step/step.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/step/step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlStep",
          "cssProperties": [
            {
              "description": "background-color for step.",
              "name": "--step-background-color"
            },
            {
              "description": "color for step border-color.",
              "name": "--step-border-color"
            },
            {
              "description": "color for step icon color.",
              "name": "--step-icon-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "step-container"
            },
            {
              "description": "The component's step content wrapper.",
              "name": "step-content"
            },
            {
              "description": "The component's step title wrapper.",
              "name": "step-icon"
            },
            {
              "description": "The component's step title wrapper.",
              "name": "step-title"
            },
            {
              "description": "The component's step description wrapper.",
              "name": "step-description"
            }
          ],
          "slots": [
            {
              "description": "The icon slot.",
              "name": "step-icon"
            },
            {
              "description": "The title slot.",
              "name": "step-title"
            },
            {
              "description": "The description slot.",
              "name": "step-description"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "图标",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "描述",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "标题",
              "attribute": "title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "顺序号",
              "attribute": "index"
            },
            {
              "kind": "method",
              "name": "isCurrentStep"
            },
            {
              "kind": "method",
              "name": "isFinished"
            },
            {
              "kind": "field",
              "name": "parentSteps",
              "type": {
                "text": "SlSteps"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "sl-event-name"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "图标",
              "fieldName": "icon"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "描述",
              "fieldName": "description"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "标题",
              "fieldName": "title"
            },
            {
              "name": "index",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "顺序号",
              "fieldName": "index"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-step",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlStep",
            "module": "src/components/step/step.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-step",
          "declaration": {
            "name": "SlStep",
            "module": "src/components/step/step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/steps/steps.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/steps/steps.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/steps/steps.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSteps",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's container wrapper.",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "The default slot accept <sl-step> chilldrens.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "当前步骤，默认从0",
              "attribute": "current",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否为竖直",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "startIndex",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "起始节点显示 序号，默认为1",
              "attribute": "startIndex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'mid' | 'larger'"
              },
              "description": "进度点 圆圈大小",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_setChildStepCss",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "childStep",
              "type": {
                "text": "Array<SlStep>"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted as current step change.",
              "name": "sl-change"
            }
          ],
          "attributes": [
            {
              "name": "current",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "当前步骤，默认从0",
              "fieldName": "current"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否为竖直",
              "fieldName": "vertical"
            },
            {
              "name": "startIndex",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "起始节点显示 序号，默认为1",
              "fieldName": "startIndex"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'mid' | 'larger'"
              },
              "description": "进度点 圆圈大小",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-step,sl-icon"
          ],
          "tagName": "sl-steps",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSteps",
            "module": "src/components/steps/steps.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-steps",
          "declaration": {
            "name": "SlSteps",
            "module": "src/components/steps/steps.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/switch/switch.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSwitch",
          "cssProperties": [
            {
              "description": "The width of the switch.",
              "name": "--width"
            },
            {
              "description": "The height of the switch.",
              "name": "--height"
            },
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The switch control.",
              "name": "control"
            },
            {
              "description": "The switch position indicator.",
              "name": "thumb"
            },
            {
              "description": "The switch label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The switch's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "switchId",
              "privacy": "private",
              "default": "`switch-${++id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`switch-label-${id}`"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The switch's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The switch's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the switch in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the switch."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the switch."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the switch."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The switch's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The switch's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "fieldName": "disabled"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "fieldName": "required"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the switch in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSwitch",
            "module": "src/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-switch",
          "declaration": {
            "name": "SlSwitch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tab/tab.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTab",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The close button, which is the icon button's base wrapper.",
              "name": "close-button"
            }
          ],
          "slots": [
            {
              "description": "The tab's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`tab-${++id}`"
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
              "attribute": "panel"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in an active state.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tab closable and shows a close icon.",
              "attribute": "closable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in a disabled state.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus to the tab."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the tab."
            },
            {
              "kind": "method",
              "name": "handleCloseClick"
            }
          ],
          "events": [
            {
              "description": "Emitted when the tab is closable and the close button is activated.",
              "name": "sl-close"
            }
          ],
          "attributes": [
            {
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
              "fieldName": "panel"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in an active state.",
              "fieldName": "active"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tab closable and shows a close icon.",
              "fieldName": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in a disabled state.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTab",
            "module": "src/components/tab/tab.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab",
          "declaration": {
            "name": "SlTab",
            "module": "src/components/tab/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-group/tab-group.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tab-group/tab-group.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-group/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTabGroup",
          "cssProperties": [
            {
              "description": "The color of the active tab indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The color of the indicator's track (i.e. the line that separates tabs from panels).",
              "name": "--track-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tab group navigation container.",
              "name": "nav"
            },
            {
              "description": "The container that wraps the slotted tabs.",
              "name": "tabs"
            },
            {
              "description": "An element that displays the currently selected tab. This is a child of the tabs container.",
              "name": "active-tab-indicator"
            },
            {
              "description": "The tab group body where tab panels are slotted in.",
              "name": "body"
            },
            {
              "description": "The previous and next scroll buttons that appear when tabs are scrollable.",
              "name": "scroll-button"
            }
          ],
          "slots": [
            {
              "description": "Used for grouping tab panels in the tab group.",
              "name": ""
            },
            {
              "description": "Used for grouping tabs in the tab group.",
              "name": "nav"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabGroup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "nav",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "SlTab"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "SlTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "SlTabPanel[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasScrollControls",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom' | 'start' | 'end'"
              },
              "default": "'top'",
              "description": "The placement of the tabs.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "attribute": "activation"
            },
            {
              "kind": "field",
              "name": "noScrollControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "attribute": "no-scroll-controls"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows the specified tab panel."
            },
            {
              "kind": "method",
              "name": "getAllTabs",
              "parameters": [
                {
                  "name": "includeDisabled",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllPanels"
            },
            {
              "kind": "method",
              "name": "getActiveTab"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleScrollToStart"
            },
            {
              "kind": "method",
              "name": "handleScrollToEnd"
            },
            {
              "kind": "method",
              "name": "updateScrollControls"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "SlTab"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ emitEvents?: boolean; scrollBehavior?: 'auto' | 'smooth' }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaLabels"
            },
            {
              "kind": "method",
              "name": "syncIndicator"
            },
            {
              "kind": "method",
              "name": "repositionIndicator"
            },
            {
              "kind": "method",
              "name": "preventIndicatorTransition"
            },
            {
              "kind": "method",
              "name": "syncTabsAndPanels"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is shown.",
              "name": "sl-tab-show"
            },
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is hidden.",
              "name": "sl-tab-hide"
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom' | 'start' | 'end'"
              },
              "default": "'top'",
              "description": "The placement of the tabs.",
              "fieldName": "placement"
            },
            {
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "fieldName": "activation"
            },
            {
              "name": "no-scroll-controls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "fieldName": "noScrollControls"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tab-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTabGroup",
            "module": "src/components/tab-group/tab-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-group",
          "declaration": {
            "name": "SlTabGroup",
            "module": "src/components/tab-group/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-panel/tab-panel.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tab-panel/tab-panel.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-panel/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTabPanel",
          "cssProperties": [
            {
              "description": "The tab panel's padding.",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The tab panel's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`tab-panel-${++id}`"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab panel's name.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the tab panel will be shown.",
              "attribute": "active",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab panel's name.",
              "fieldName": "name"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the tab panel will be shown.",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTabPanel",
            "module": "src/components/tab-panel/tab-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-panel",
          "declaration": {
            "name": "SlTabPanel",
            "module": "src/components/tab-panel/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/cellDefaultRender.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registerColTemplate",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "列的类型"
            },
            {
              "name": "templateFun",
              "type": {
                "text": "(column: SlColumn, table: SlTable) => TemplateResult<1>"
              },
              "description": "渲染Template ，函数接收两个参数，一个是column, 一个table对象"
            }
          ],
          "description": "注册Table 列TH 默认渲染"
        },
        {
          "kind": "function",
          "name": "getReisterColTemplate",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "checkboxColChange",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            },
            {
              "name": "checkbox",
              "type": {
                "text": "SlCheckbox"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getColumnRenderResult",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellHeadContext"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "registerCellTemplate",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "列的类型"
            },
            {
              "name": "templateFun",
              "type": {
                "text": "(context: CellContext, table: SlTable) => TemplateResult<1>"
              },
              "description": "渲染Template ，函数接收两个参数，cellContext, 一个table对象"
            }
          ],
          "description": "注册Table 列TD默认渲染"
        },
        {
          "kind": "function",
          "name": "checkboxTDChange",
          "parameters": [
            {
              "name": "checkbox",
              "type": {
                "text": "SlCheckbox"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getReisterCellTemplate",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registerColTemplate",
          "declaration": {
            "name": "registerColTemplate",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "getReisterColTemplate",
          "declaration": {
            "name": "getReisterColTemplate",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "checkboxColChange",
          "declaration": {
            "name": "checkboxColChange",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "getColumnRenderResult",
          "declaration": {
            "name": "getColumnRenderResult",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerCellTemplate",
          "declaration": {
            "name": "registerCellTemplate",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "checkboxTDChange",
          "declaration": {
            "name": "checkboxTDChange",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        },
        {
          "kind": "js",
          "name": "getReisterCellTemplate",
          "declaration": {
            "name": "getReisterCellTemplate",
            "module": "src/components/table/cellDefaultRender.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/edit.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registDefaultEditor",
          "parameters": [
            {
              "name": "editKey",
              "type": {
                "text": "string"
              },
              "description": "编辑器类型"
            },
            {
              "name": "editTemplate",
              "type": {
                "text": "(context: CellContext) => TemplateResult<1>"
              },
              "description": "编辑器实现"
            }
          ],
          "description": "注册默认单元格编辑器 Editor"
        },
        {
          "kind": "function",
          "name": "getSelectLable",
          "parameters": [
            {
              "name": "item",
              "type": {
                "text": "ColumnItems"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findItemLable",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Array<ColumnItems>"
              }
            },
            {
              "name": "fieldValue",
              "type": {
                "text": "string | number | Array<string | number>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "emitTableCellEditFun",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellContext"
              }
            },
            {
              "name": "dom",
              "type": {
                "text": "EventTarget"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            }
          ],
          "description": "触发sl-table-edit-cell 事件"
        },
        {
          "kind": "variable",
          "name": "editNone",
          "type": {
            "text": "object"
          },
          "default": "{}",
          "description": "常量，表明 此单元格 不变成编辑模式"
        },
        {
          "kind": "function",
          "name": "getCellEditor",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellContext"
              }
            }
          ],
          "description": "获取TD 的编辑器"
        },
        {
          "kind": "function",
          "name": "isCellEditor",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellContext"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ],
          "description": "判断当前 单元格是否是编辑状态",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registDefaultEditor",
          "declaration": {
            "name": "registDefaultEditor",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "getSelectLable",
          "declaration": {
            "name": "getSelectLable",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "findItemLable",
          "declaration": {
            "name": "findItemLable",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "emitTableCellEditFun",
          "declaration": {
            "name": "emitTableCellEditFun",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "editNone",
          "declaration": {
            "name": "editNone",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCellEditor",
          "declaration": {
            "name": "getCellEditor",
            "module": "src/components/table/edit.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCellEditor",
          "declaration": {
            "name": "isCellEditor",
            "module": "src/components/table/edit.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/sort.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderSortHeaderTemplate",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            },
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              }
            },
            {
              "name": "hander",
              "type": {
                "text": "EventListener"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortRenderHanlder",
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getSortValueAsSql",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            },
            {
              "name": "converField",
              "optional": true,
              "type": {
                "text": "(field: string) => string"
              }
            },
            {
              "description": "处理字段转sql 字段，例如\"name\" ->\"a.name\"",
              "name": "converto"
            }
          ],
          "description": "将table 排序字段值转为为Sql",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderSortHeaderTemplate",
          "declaration": {
            "name": "renderSortHeaderTemplate",
            "module": "src/components/table/sort.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortRenderHanlder",
          "declaration": {
            "name": "sortRenderHanlder",
            "module": "src/components/table/sort.ts"
          }
        },
        {
          "kind": "js",
          "name": "getSortValueAsSql",
          "declaration": {
            "name": "getSortValueAsSql",
            "module": "src/components/table/sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/table.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/table/table.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/table.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getRowContext",
          "parameters": [
            {
              "name": "tr",
              "type": {
                "text": "HTMLTableRowElement"
              }
            }
          ],
          "description": "获取 table tbody tr 上下文"
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlTable",
          "cssProperties": [
            {
              "description": "td,th padding",
              "name": "--sl-th-padding-size"
            },
            {
              "description": "边框颜色 ，例如 220,180,19 这种数字格式的颜色",
              "name": "--sl-table-border-color"
            },
            {
              "description": "table背景颜色 ，例如 220,180,19 这种数字格式的颜色",
              "name": "--sl-table-background-color"
            },
            {
              "description": "-1px，定义表格单元格右侧的线条宽度",
              "name": "--sl-table-td-right-width"
            },
            {
              "description": "-1px，定义表格单元格底侧的线条宽度",
              "name": "--sl-table-td-bottom-width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's scroll-div .",
              "name": "scroll-div"
            },
            {
              "description": "The component's table .",
              "name": "table"
            },
            {
              "description": "The th's resize-hanlder .",
              "name": "resize-hanler"
            }
          ],
          "slots": [
            {
              "description": "no-data slot.",
              "name": "no-data"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "componentID",
              "default": "`${'tableID_' + componentID++}`"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'larger' | 'default'"
              },
              "default": "'small'",
              "description": "td size"
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "table 是否显示border",
              "attribute": "border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoverAble",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "table 是否支持鼠标活动行变色"
            },
            {
              "kind": "field",
              "name": "stripe",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "table 支持斑马线"
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "unknown[]"
              },
              "description": "表格需要渲染的数据 必须是数组"
            },
            {
              "kind": "field",
              "name": "sortConfig",
              "type": {
                "text": "SortConfig"
              },
              "default": "{ ...defaultSortConfig }"
            },
            {
              "kind": "field",
              "name": "sortValue",
              "type": {
                "text": "SortValue | Array<SortValue> | undefined"
              },
              "description": "表格当前排序值"
            },
            {
              "kind": "field",
              "name": "treeConfig",
              "type": {
                "text": "TreeConfig | undefined"
              }
            },
            {
              "kind": "field",
              "name": "fixedFoot",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "table 是否固定footer 到底部"
            },
            {
              "kind": "field",
              "name": "customRenderFooter",
              "type": {
                "text": "(columns: SlColumn[]) => TemplateResult<1>"
              },
              "description": "渲染tfooter 此方法接收所有的列，返回footer 组成的tr template list",
              "attribute": "customRenderFooter"
            },
            {
              "kind": "field",
              "name": "cacheKey",
              "type": {
                "text": "string"
              },
              "description": "table 前端缓存ID",
              "attribute": "cache-key",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "locacheIDChange",
              "parameters": [
                {
                  "name": "oldKey",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortConfigChange"
            },
            {
              "kind": "field",
              "name": "tableMaxHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器最大高度",
              "attribute": "tableMaxHeight"
            },
            {
              "kind": "field",
              "name": "tableMinHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器最小高度",
              "attribute": "tableMinHeight"
            },
            {
              "kind": "field",
              "name": "tableHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器高度，支持类似 css  \"100% - 40px\" 或者“ 100vh - 30px ”",
              "attribute": "tableHeight"
            },
            {
              "kind": "field",
              "name": "tableLayoutFixed",
              "type": {
                "text": "boolean"
              },
              "description": "是否表格 是 table-layout ：fixed",
              "attribute": "tableLayoutFixed"
            },
            {
              "kind": "field",
              "name": "treeNodeNoWrap",
              "type": {
                "text": "boolean"
              },
              "description": "true, 则TreeNode 列，不会换行",
              "attribute": "treeNodeNoWrap"
            },
            {
              "kind": "field",
              "name": "table",
              "type": {
                "text": "HTMLTableElement"
              }
            },
            {
              "kind": "field",
              "name": "innerDataSource",
              "type": {
                "text": "unknown[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getRenderDataSource",
              "privacy": "public",
              "description": "获取表格实际渲染的数据列表"
            },
            {
              "kind": "method",
              "name": "treeNodeHasChildren",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "treeLoadingNode",
              "type": {
                "text": "TreeNodeData[]"
              },
              "default": "[]",
              "description": "当为Tree的时候，存储哪些 正在加载中的TreeNodeData"
            },
            {
              "kind": "field",
              "name": "treeLoadingNodeMethod",
              "type": {
                "text": "(context: CellContext) => Promise<Array<TreeNodeData>>"
              },
              "description": "加载TreeNode 子数据，接收参数nodeData,parentData",
              "attribute": "treeLoadingNodeMethod"
            },
            {
              "kind": "field",
              "name": "expandRowData",
              "type": {
                "text": "unknown[]"
              },
              "default": "[]",
              "description": "存储哪些行数据是展开的"
            },
            {
              "kind": "field",
              "name": "expandColumn",
              "type": {
                "text": "string"
              },
              "description": "指定哪一列触发行扩展数据加载"
            },
            {
              "kind": "field",
              "name": "expandLazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否懒加载扩展行"
            },
            {
              "kind": "field",
              "name": "expandLazyLoadMethod",
              "type": {
                "text": "(rowData: unknown) => Promise<any>"
              },
              "description": "指定懒加载扩展的方法"
            },
            {
              "kind": "field",
              "name": "expandAccordion",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否只能展开一个扩展行"
            },
            {
              "kind": "field",
              "name": "expandingRowData",
              "type": {
                "text": "Array<unknown>"
              },
              "default": "[]",
              "description": "存储正在展开的行数据"
            },
            {
              "kind": "field",
              "name": "expandRowRender",
              "type": {
                "text": "(rowContext: RowContext, columns: SlColumn[], layLoadData?: any) => TemplateResult<1>"
              },
              "description": "方法：指定如何渲染扩展行，接收行数据和叶子columns， 返回的应该是<tr>Template Result"
            },
            {
              "kind": "field",
              "name": "cacheExpandLazyLoadDataMap",
              "default": "new Map<any, any>()",
              "description": "存储已经加载过的扩展数据"
            },
            {
              "kind": "method",
              "name": "doExpandRowData",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "table 行绑定的数据"
                }
              ],
              "description": "展开行数据的扩展 数据"
            },
            {
              "kind": "field",
              "name": "cacheTreeNodeMap",
              "type": {
                "text": "Map<any, TreeNodeCacheType>"
              },
              "privacy": "private",
              "description": "Tree 列表的时候启用，缓存节点渲染层次"
            },
            {
              "kind": "method",
              "name": "getRowDataTreeLevel",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ],
              "description": "获取渲染后的 rowData 对应的Tree level"
            },
            {
              "kind": "method",
              "name": "getRowDataParentData",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ],
              "description": "获取渲染后的 rowData 对应的父对象"
            },
            {
              "kind": "method",
              "name": "getRowDataDataIndex",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ],
              "description": "获取渲染后的 rowData 的顺序号"
            },
            {
              "kind": "field",
              "name": "treeDataCache",
              "privacy": "public",
              "description": "Table 启用Tree 的时候，获取缓存数据关系"
            },
            {
              "kind": "field",
              "name": "thead",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "table  heading"
            },
            {
              "kind": "field",
              "name": "baseDiv",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "scrollDiv",
              "type": {
                "text": "HTMLDivElement"
              },
              "description": "scroll DIV"
            },
            {
              "kind": "field",
              "name": "isAsyncTableWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "标识是否在进行tableAsync 同步"
            },
            {
              "kind": "method",
              "name": "asynTableHeaderWidth"
            },
            {
              "kind": "field",
              "name": "_resizeResult",
              "type": {
                "text": "DisposeObject"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderNoDataTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "fixedColumns",
              "type": {
                "text": "string | Array<Number>"
              },
              "description": "设置表格 列固定，例如：fixedColumns=\"2\",则为前两列固定，\"2,2\" 则为前两列，后两列固定，\"0,2\" ，[0,2]则为最后两列固定"
            },
            {
              "kind": "method",
              "name": "caculateFixedColumnStyle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "col",
                  "type": {
                    "text": "SlColumn"
                  }
                },
                {
                  "name": "tableRect",
                  "type": {
                    "text": "DOMRect"
                  }
                },
                {
                  "name": "fixedLeft",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "watchFixedColumnsChange"
            },
            {
              "kind": "field",
              "name": "fixedStyleElement",
              "type": {
                "text": "HTMLStyleElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderTheadRows",
              "privacy": "private",
              "description": "渲染表头行 theader tr th"
            },
            {
              "kind": "field",
              "name": "customRenderCellStyle",
              "type": {
                "text": "(context: CellContext) => StyleInfo"
              },
              "description": "自定义 渲染tbody td的样式"
            },
            {
              "kind": "field",
              "name": "customRenderCellClassMap",
              "type": {
                "text": "(cellContext: CellContext) => ClassInfo | string | string[]"
              },
              "description": "自定义 渲染tbody td的class"
            },
            {
              "kind": "field",
              "name": "customRenderCellSpread",
              "type": {
                "text": "(cellContext: CellContext) => SpreadResult"
              },
              "description": "自定义 渲染tbody td的 SpreadResult"
            },
            {
              "kind": "field",
              "name": "customRenderCellHeadStyle",
              "type": {
                "text": "(context: CellHeadContext) => StyleInfo"
              },
              "description": "自定义 渲染tHeader th的样式"
            },
            {
              "kind": "field",
              "name": "customRenderCellHeadClassMap",
              "type": {
                "text": "(context: CellHeadContext) => ClassInfo | string | string[]"
              },
              "description": "自定义 渲染thead th的class"
            },
            {
              "kind": "field",
              "name": "customRenderCellHeadSpread",
              "type": {
                "text": "(context: CellHeadContext) => SpreadResult"
              },
              "description": "自定义 渲染thead  th SpreadResult"
            },
            {
              "kind": "field",
              "name": "customRenderRowStyle",
              "type": {
                "text": "(rowContext: RowContext) => StyleInfo"
              },
              "description": "自定义 渲染tbody tr的样式"
            },
            {
              "kind": "field",
              "name": "customRenderRowClassMap",
              "type": {
                "text": "(rowContext: RowContext) => ClassInfo | string | string[]"
              },
              "description": "自定义 渲染tHeader tr的样式"
            },
            {
              "kind": "field",
              "name": "customRenderRowSpread",
              "type": {
                "text": "(rowContext: RowContext) => SpreadResult"
              },
              "description": "自定义 渲染tbody tr的Spread"
            },
            {
              "kind": "field",
              "name": "virtualItemHeight",
              "type": {
                "text": "number"
              },
              "default": "45",
              "description": "虚拟滚动行高"
            },
            {
              "kind": "field",
              "name": "enableVirtualScroll",
              "type": {
                "text": "number"
              },
              "description": "虚拟滚动启用"
            },
            {
              "kind": "field",
              "name": "editEnable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "表格编辑总控： 是否允许启动表格编辑功能"
            },
            {
              "kind": "field",
              "name": "editMode",
              "type": {
                "text": "'row' | 'column' | 'cell'"
              },
              "default": "'row'",
              "description": "编辑模式：row:行编辑(一次编辑一行，cell:单元格编辑（一次编辑一个TD），columm：列编辑模式，一次编辑一列"
            },
            {
              "kind": "field",
              "name": "editAccordion",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "编辑行为：如果 editMode=row,是否一次允许出现多个行编辑，editMode=column, 是否允许一出出现多列编辑"
            },
            {
              "kind": "method",
              "name": "changeEditAccordion"
            },
            {
              "kind": "field",
              "name": "editTrigger",
              "type": {
                "text": "string"
              },
              "default": "'click'",
              "description": "触发编辑模式的事件,支持click,dbclick,manual"
            },
            {
              "kind": "field",
              "name": "currentEditRow",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]",
              "description": "当前编辑的行数据"
            },
            {
              "kind": "field",
              "name": "currentEditCell",
              "type": {
                "text": "{ column: SlColumn; rowData: any } | undefined"
              },
              "description": "当前编辑的单元格"
            },
            {
              "kind": "field",
              "name": "currentEditColumn",
              "type": {
                "text": "Array<SlColumn>"
              },
              "default": "[]",
              "description": "当前编辑的列"
            },
            {
              "kind": "field",
              "name": "enableCellBox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "TBody TD 是否启用多行..."
            },
            {
              "kind": "field",
              "name": "cellBoxLines",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "TBody TD 是否超过多行则..."
            },
            {
              "kind": "method",
              "name": "watchCellBoxLinesChange"
            },
            {
              "kind": "field",
              "name": "checkPropField",
              "type": {
                "text": "string | ((rowData: any) => any)"
              },
              "description": "定义列 type='checkbox','radio'时起作用， 定义checkbox 列绑定的属性 ，如果不指定，则Table checkbox列 绑定值就是rowData 本身",
              "attribute": "checkPropField"
            },
            {
              "kind": "field",
              "name": "checkDisablePropField",
              "type": {
                "text": "string | ((rowData: any) => boolean)"
              },
              "description": "定义列 type='checkbox','radio'时起作用， 确定列 checkbx/radio Disable属性,或者一个函数接收rowData ，确定rowData checkbox 列是否可以选择 如果不指定，则此列checkbox 所有的都可以勾选",
              "attribute": "checkDisablePropField"
            },
            {
              "kind": "field",
              "name": "checkValue",
              "type": {
                "text": "any | Array<any>"
              },
              "description": "定义表格当前多选中的值（作用于type=checkbox 列上）"
            },
            {
              "kind": "field",
              "name": "radioValue",
              "type": {
                "text": "any"
              },
              "description": "定义表格当前单选的值（作用于type=radio 列上）"
            },
            {
              "kind": "field",
              "name": "checkTreeCasecadeDown",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "如果启用TreeConfig ,checkbox 向下级联 选中"
            },
            {
              "kind": "field",
              "name": "checkTreeCasecadeUp",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "如果启用TreeConfig ,checkbox 向上级联 选中"
            },
            {
              "kind": "method",
              "name": "getRowDataCheckValue",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "获取rowData 选中值"
            },
            {
              "kind": "method",
              "name": "forEachCheckValue",
              "privacy": "public",
              "parameters": [
                {
                  "name": "vistorFun",
                  "type": {
                    "text": "(rowData: any, ...args: any) => void"
                  },
                  "description": "数据处理器"
                }
              ],
              "description": "循环 选中的数据"
            },
            {
              "kind": "method",
              "name": "isRowDataChecked",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "判断rowData 是否是checkbox 列选中"
            },
            {
              "kind": "method",
              "name": "isRowDataRadioChecked",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "判断rowData 是否是radio 列选中"
            },
            {
              "kind": "method",
              "name": "isRowDataCheckedDisabled",
              "privacy": "public",
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "判断rowData 是否是checkbox,radio列 disable"
            },
            {
              "kind": "method",
              "name": "watchDataSourceChange"
            },
            {
              "kind": "method",
              "name": "_renderRowDataBetween",
              "privacy": "private",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRowContext",
              "privacy": "public",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "HTMLTableRowElement"
                  }
                }
              ],
              "description": "获取 行上下文"
            },
            {
              "kind": "method",
              "name": "getCellContext",
              "privacy": "public",
              "parameters": [
                {
                  "name": "td",
                  "type": {
                    "text": "HTMLTableCellElement"
                  }
                }
              ],
              "description": "获取 td 上下文"
            },
            {
              "kind": "method",
              "name": "getHeadCellContext",
              "privacy": "public",
              "parameters": [
                {
                  "name": "th",
                  "type": {
                    "text": "HTMLTableCellElement"
                  }
                }
              ],
              "description": "获取 thead th 上下文"
            },
            {
              "kind": "method",
              "name": "_virtualRenderTbodyRows",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderDataSourceRows",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "allSubColumns",
              "type": {
                "text": "SlColumn[]"
              }
            },
            {
              "kind": "field",
              "name": "canShowColumns",
              "type": {
                "text": "SlColumn[]"
              }
            },
            {
              "kind": "field",
              "name": "theadRows",
              "type": {
                "text": "RowHeader"
              },
              "privacy": "private",
              "default": "[]",
              "description": "表头真实数据，有多少行，每个th 有rowspan ,colspan"
            },
            {
              "kind": "field",
              "name": "tdRenderColumns",
              "type": {
                "text": "SlColumn[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "循环数据，输出tbody 的表头定义数组"
            },
            {
              "kind": "field",
              "name": "isColumnHanlderFlag",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "columnChangeHanlder",
              "privacy": "public",
              "description": "如果column 发生了变化，需要重新计算 表头布局"
            }
          ],
          "events": [
            {
              "description": "Emitted table resize.",
              "name": "sl-table-resize"
            },
            {
              "type": {
                "text": "{div:HTMLDIVElement}"
              },
              "description": "Emitted scroll table.滚动事件",
              "name": "sl-table-scroll"
            },
            {
              "type": {
                "text": "{column:SLColumn,sortValue:当前排序值}"
              },
              "description": "Emitted table column sort. 排序事件",
              "name": "sl-table-sort"
            },
            {
              "type": {
                "text": "{column:SLColumn,sortValue:排序前值}"
              },
              "description": "Emitted before table column sort. 排序事件",
              "name": "sl-table-before-sort"
            },
            {
              "type": {
                "text": "{column:SLColumn,change:改变的宽度}"
              },
              "description": "Emitted table column width change by drag. 拖动列事件",
              "name": "sl-table-column-resize"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted before table tree node to open   . tree 事件",
              "name": "sl-tree-node-before-open"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted before table tree node to close  . tree 事件",
              "name": "sl-tree-node-before-close"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted before table tbody td node state toogle  . tree 事件",
              "name": "sl-tree-node-before-toogle"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted after table tbody td node state toogle  . tree 事件",
              "name": "sl-tree-node-open"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted after table tbody td node state toogle  .tree 事件",
              "name": "sl-tree-node-toogle"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "after table tree node lazy load children end  .tree load 事件",
              "name": "sl-tree-node-loaded"
            },
            {
              "type": {
                "text": "{dom:HTMLElement,context:CellContext}"
              },
              "description": "Emitted after table tbody td node state toogle  .tree 事件 //tbody 行，tbody tr 事件",
              "name": "sl-tree-node-load-error"
            },
            {
              "type": {
                "text": "{row:TR,context:RowContext}"
              },
              "description": "Emitted table tbody tr trigger normalEvent .support normalEvent event [click,dblclick,keydown,keypress,mousedown,mouseenter,mouseleave,mousemove,mouseout,mouseover,mouseup]  . //tbody 行，tbody tr td 事件",
              "name": "sl-table-tr-${normalEvent}"
            },
            {
              "type": {
                "text": "{row:TR,td:TD,context:CellContext}"
              },
              "description": "Emitted table tbody td trigger normalEvent.  support normalEvent  event [click,dblclick,keydown,keypress,mousedown,mouseenter,mouseleave,mousemove,mouseout,mouseover,mouseup].",
              "name": "sl-table-td-${normalEvent}"
            },
            {
              "type": {
                "text": "{td:TD,dom:HTMLElement,context:CellContext,value:any}"
              },
              "description": "当Table 组件内置 cell edit 数据发生变化,时触发.",
              "name": "sl-table-cell-edit-commit"
            },
            {
              "type": {
                "text": "{td:TD,context:CellContext}"
              },
              "description": "Emitted  before when table  edit cell  change .",
              "name": "sl-table-cell-edit-before-change-"
            },
            {
              "type": {
                "text": "{td:TD,dom:HTMLElement,context:CellContext}"
              },
              "description": "当单元格开始进入编辑状态（此时cell还没变成编辑状态，可以取消阻止事件）",
              "name": "sl-cell-edit-start"
            },
            {
              "type": {
                "text": "{td:TD,dom:HTMLElement,context:CellContext}"
              },
              "description": "当单元格进入了编辑状态时触发 //EIDT 发生顺序（sl-table-cell-edit-before-change->sl-cell-edit-start->sl-table-cell-edit-active) //表格 checkbox 控制",
              "name": "sl-cell-edit-active"
            },
            {
              "type": {
                "text": "{checkbox:SlCheckbox,context:CellContext }"
              },
              "description": "Emitted  before  tbody checkbox check will change .",
              "name": "sl-table-check-before-change"
            },
            {
              "type": {
                "text": "{checkbox:SlCheckbox,context:CellContext }"
              },
              "description": "Emitted  before when column checkbox will change .",
              "name": "sl-table-check-head-before-change"
            },
            {
              "type": {
                "text": "{value:Array<any> }"
              },
              "description": "Emitted  after  tbody checkbox check  changed.",
              "name": "sl-table-check-change"
            }
          ],
          "attributes": [
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "table 是否显示border",
              "fieldName": "border"
            },
            {
              "name": "customRenderFooter",
              "type": {
                "text": "(columns: SlColumn[]) => TemplateResult<1>"
              },
              "description": "渲染tfooter 此方法接收所有的列，返回footer 组成的tr template list",
              "fieldName": "customRenderFooter"
            },
            {
              "name": "cache-key",
              "type": {
                "text": "string"
              },
              "description": "table 前端缓存ID",
              "fieldName": "cacheKey"
            },
            {
              "name": "tableMaxHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器最大高度",
              "fieldName": "tableMaxHeight"
            },
            {
              "name": "tableMinHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器最小高度",
              "fieldName": "tableMinHeight"
            },
            {
              "name": "tableHeight",
              "type": {
                "text": "string"
              },
              "description": "table 容器高度，支持类似 css  \"100% - 40px\" 或者“ 100vh - 30px ”",
              "fieldName": "tableHeight"
            },
            {
              "name": "tableLayoutFixed",
              "type": {
                "text": "boolean"
              },
              "description": "是否表格 是 table-layout ：fixed",
              "fieldName": "tableLayoutFixed"
            },
            {
              "name": "treeNodeNoWrap",
              "type": {
                "text": "boolean"
              },
              "description": "true, 则TreeNode 列，不会换行",
              "fieldName": "treeNodeNoWrap"
            },
            {
              "name": "treeLoadingNodeMethod",
              "type": {
                "text": "(context: CellContext) => Promise<Array<TreeNodeData>>"
              },
              "description": "加载TreeNode 子数据，接收参数nodeData,parentData",
              "fieldName": "treeLoadingNodeMethod"
            },
            {
              "name": "checkPropField",
              "type": {
                "text": "string | ((rowData: any) => any)"
              },
              "description": "定义列 type='checkbox','radio'时起作用， 定义checkbox 列绑定的属性 ，如果不指定，则Table checkbox列 绑定值就是rowData 本身",
              "fieldName": "checkPropField"
            },
            {
              "name": "checkDisablePropField",
              "type": {
                "text": "string | ((rowData: any) => boolean)"
              },
              "description": "定义列 type='checkbox','radio'时起作用， 确定列 checkbx/radio Disable属性,或者一个函数接收rowData ，确定rowData checkbox 列是否可以选择 如果不指定，则此列checkbox 所有的都可以勾选",
              "fieldName": "checkDisablePropField"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-column,sl-icon,sl-spinner"
          ],
          "tagName": "sl-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRowContext",
          "declaration": {
            "name": "getRowContext",
            "module": "src/components/table/table.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTable",
            "module": "src/components/table/table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-table",
          "declaration": {
            "name": "SlTable",
            "module": "src/components/table/table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/tableCacheHelper.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "readTableAsCacheValue",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ],
          "description": "读取table 状态",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "removeTableCacheByKey",
          "parameters": [
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "restoreTableDefault",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ],
          "description": "恢复缺省，去掉所有缓存"
        },
        {
          "kind": "function",
          "name": "restoreFormTableCache",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            },
            {
              "name": "cache",
              "type": {
                "text": "TableCacheType"
              }
            }
          ],
          "description": "将缓存应用到table"
        },
        {
          "kind": "function",
          "name": "restoreFromLocalCache",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "saveAsDefaultTableCache",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "updateTableCache",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "readTableAsCacheValue",
          "declaration": {
            "name": "readTableAsCacheValue",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeTableCacheByKey",
          "declaration": {
            "name": "removeTableCacheByKey",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "restoreTableDefault",
          "declaration": {
            "name": "restoreTableDefault",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "restoreFormTableCache",
          "declaration": {
            "name": "restoreFormTableCache",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "restoreFromLocalCache",
          "declaration": {
            "name": "restoreFromLocalCache",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "saveAsDefaultTableCache",
          "declaration": {
            "name": "saveAsDefaultTableCache",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "updateTableCache",
          "declaration": {
            "name": "updateTableCache",
            "module": "src/components/table/tableCacheHelper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/tableConfig.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultSortConfig",
          "type": {
            "text": "object"
          },
          "default": "{\n  //排序区域控制，默认是th,也可以改为只点击排序图标，才能触发排序\n  trigger: SortTrigger.cell,\n  //order 轮训值,开始为ASC，后面DESC，最后去掉排序 （null,这个跟产品不一致，可以默认去掉)\n  // orders: [SortingEnum.ASC, SortingEnum.DESC, SortingEnum.NULL],\n  orders: [SortingEnum.ASC, SortingEnum.DESC],\n  multi: false,\n  //是否总是显示排序图标,如果总是\n  alwaysShowIcon: false\n}"
        },
        {
          "kind": "variable",
          "name": "defaultTreeConfig",
          "type": {
            "text": "TreeConfig"
          },
          "default": "{\n  idProp: 'id',\n  //childrenProp:'children',\n  indent: 14,\n  accordion: false,\n  lazy: false,\n  treeNodeColumn: 'name',\n  hasChildProp: 'hasChild'\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultSortConfig",
          "declaration": {
            "name": "defaultSortConfig",
            "module": "src/components/table/tableConfig.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultTreeConfig",
          "declaration": {
            "name": "defaultTreeConfig",
            "module": "src/components/table/tableConfig.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/tableEventHelper.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getTreeNodeAllChildrenSize",
          "parameters": [
            {
              "name": "rowData",
              "type": {
                "text": "TreeNodeData"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "TABLE_TBODY_DELEGATE_EVENTS",
          "type": {
            "text": "array"
          },
          "default": "['click', 'dblclick', 'contextmenu', 'keydown', 'keyup', 'keypress', 'mousedown', 'mouseenter', 'mousemove', 'mouseover', 'mouseout']",
          "description": "tbody 代理的事件"
        },
        {
          "kind": "function",
          "name": "connectTableHanlder",
          "parameters": [
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getTreeNodeAllChildrenSize",
          "declaration": {
            "name": "getTreeNodeAllChildrenSize",
            "module": "src/components/table/tableEventHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABLE_TBODY_DELEGATE_EVENTS",
          "declaration": {
            "name": "TABLE_TBODY_DELEGATE_EVENTS",
            "module": "src/components/table/tableEventHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "connectTableHanlder",
          "declaration": {
            "name": "connectTableHanlder",
            "module": "src/components/table/tableEventHelper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/tableHelper.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getFieldValue",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "any"
              },
              "description": "数据"
            },
            {
              "name": "field",
              "type": {
                "text": "string | ((data: any) => any)"
              },
              "description": "字段"
            }
          ],
          "description": "获取数据的字段值"
        },
        {
          "kind": "function",
          "name": "setFieldValue",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "field",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getColumnCacheData",
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "caculateColumnData",
          "return": {
            "type": {
              "text": "*"
            }
          },
          "parameters": [
            {
              "name": "columns",
              "type": {
                "text": "SlColumn[]"
              },
              "description": "表头"
            }
          ],
          "description": "将表头排版布局，计算出 有多少行，每个单元格跨多少行，多少列，用于渲染表头，取colspan=4 的columnData来渲染tbody TD"
        },
        {
          "kind": "function",
          "name": "findLastCanChangeWidth",
          "return": {
            "type": {
              "text": "SlColumn"
            }
          },
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              }
            }
          ],
          "description": "查找PColumn 最底层最后一个能够拖动的PColumn"
        },
        {
          "kind": "function",
          "name": "getThCellByColumn",
          "return": {
            "type": {
              "text": "HTMLTableCellElement"
            }
          },
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              }
            }
          ],
          "description": "查找PColumn 对应的th"
        },
        {
          "kind": "function",
          "name": "isColumnContainsColumn",
          "parameters": [
            {
              "name": "column",
              "type": {
                "text": "SlColumn"
              },
              "description": "父级列"
            },
            {
              "name": "subColumn",
              "type": {
                "text": "SlColumn"
              },
              "description": "子列"
            }
          ],
          "description": "判断列 是否包含 子列"
        },
        {
          "kind": "function",
          "name": "isNumberWidth",
          "parameters": [
            {
              "name": "col",
              "type": {
                "text": "Number | string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getFieldValue",
          "declaration": {
            "name": "getFieldValue",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "setFieldValue",
          "declaration": {
            "name": "setFieldValue",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "getColumnCacheData",
          "declaration": {
            "name": "getColumnCacheData",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "findLastCanChangeWidth",
          "declaration": {
            "name": "findLastCanChangeWidth",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "getThCellByColumn",
          "declaration": {
            "name": "getThCellByColumn",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "isColumnContainsColumn",
          "declaration": {
            "name": "isColumnContainsColumn",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "isNumberWidth",
          "declaration": {
            "name": "isNumberWidth",
            "module": "src/components/table/tableHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "caculateColumnData",
            "module": "src/components/table/tableHelper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/tableRenderHelper.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getTableHeadCellContext",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLTableCellElement"
              }
            }
          ],
          "description": "获取 td 上下文"
        },
        {
          "kind": "function",
          "name": "renderThColTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellHeadContext"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getColumnCellRenderTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellContext"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getCellContext",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLTableCellElement"
              }
            }
          ],
          "description": "获取 td 上下文"
        },
        {
          "kind": "function",
          "name": "renderTdCellTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "CellContext"
              }
            },
            {
              "name": "table",
              "type": {
                "text": "SlTable"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "TABLESVG",
          "type": {
            "text": "object"
          },
          "default": "{\n  closeNodeSvg,\n  openNodeSvg,\n  expendCloseSvg,\n  expendOpendSvg\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getTableHeadCellContext",
          "declaration": {
            "name": "getTableHeadCellContext",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "renderThColTemplate",
          "declaration": {
            "name": "renderThColTemplate",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "getColumnCellRenderTemplate",
          "declaration": {
            "name": "getColumnCellRenderTemplate",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCellContext",
          "declaration": {
            "name": "getCellContext",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "renderTdCellTemplate",
          "declaration": {
            "name": "renderTdCellTemplate",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABLESVG",
          "declaration": {
            "name": "TABLESVG",
            "module": "src/components/table/tableRenderHelper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/virtualScroll.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "vituralScrollCalc",
          "return": {
            "type": {
              "text": "VitrurlResult"
            }
          },
          "parameters": [
            {
              "name": "contentHeight",
              "type": {
                "text": "number"
              },
              "description": "内容可视高度"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "description": "需要渲染的数据总数"
            },
            {
              "name": "rowHeight",
              "type": {
                "text": "number"
              },
              "description": "每个数据渲染的行高"
            },
            {
              "name": "scrollTop",
              "type": {
                "text": "number"
              },
              "description": "当前已经滚动的高度"
            }
          ],
          "description": "固定高度虚拟滚动计算"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "vituralScrollCalc",
          "declaration": {
            "name": "vituralScrollCalc",
            "module": "src/components/table/virtualScroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tag/tag.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTag",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tag content.",
              "name": "content"
            },
            {
              "description": "The remove button.",
              "name": "remove-button"
            }
          ],
          "slots": [
            {
              "description": "The tag's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'neutral'",
              "description": "The tag's type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable.",
              "attribute": "removable"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick"
            }
          ],
          "events": [
            {
              "description": "Emitted when the remove button is activated.",
              "name": "sl-remove"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'neutral'",
              "description": "The tag's type.",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "fieldName": "size"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable.",
              "fieldName": "removable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTag",
            "module": "src/components/tag/tag.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tag",
          "declaration": {
            "name": "SlTag",
            "module": "src/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/textarea/textarea.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTextarea",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The form control that wraps the label, textarea, and help text.",
              "name": "form-control"
            },
            {
              "description": "The textarea label.",
              "name": "label"
            },
            {
              "description": "The textarea control.",
              "name": "textarea"
            },
            {
              "description": "The textarea help text.",
              "name": "help-text"
            }
          ],
          "slots": [
            {
              "description": "The textarea's label. Alternatively, you can use the label prop.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the input.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`textarea-${++id}`"
            },
            {
              "kind": "field",
              "name": "helpTextId",
              "privacy": "private",
              "default": "`textarea-help-text-${id}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`textarea-label-${id}`"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHelpTextSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasLabelSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The textarea's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled textarea.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The textarea's label. Alternatively, you can use the label slot.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's help text. Alternatively, you can use the help-text slot.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The textarea's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "attribute": "resize"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters' | 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The textarea's autocaptialize attribute.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocorrect attribute.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocomplete attribute.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The textarea's autofocus attribute.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the textarea.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The textarea's inputmode attribute.",
              "attribute": "inputmode"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{ top?: number; left?: number }"
                  }
                }
              ],
              "description": "Gets or sets the textarea's scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "setTextareaHeight"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "sl-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "fieldName": "size"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The textarea's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled textarea.",
              "fieldName": "filled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The textarea's label. Alternatively, you can use the label slot.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's help text. Alternatively, you can use the help-text slot.",
              "fieldName": "helpText"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The textarea's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "fieldName": "rows"
            },
            {
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "fieldName": "resize"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "fieldName": "required"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters' | 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The textarea's autocaptialize attribute.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocorrect attribute.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocomplete attribute.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The textarea's autofocus attribute.",
              "fieldName": "autofocus"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the textarea.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The textarea's inputmode attribute.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-textarea",
          "declaration": {
            "name": "SlTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tooltip/tooltip.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTooltip",
          "cssProperties": [
            {
              "description": "The background color of  tooltip ,like: 87 83 78",
              "name": "--sl-tooltip-background-color"
            },
            {
              "description": "The font color of  tooltip ,like: 87 83 78",
              "name": "--sl-tooltip-color"
            },
            {
              "description": "The maximum width of the tooltip.",
              "name": "--max-width"
            },
            {
              "description": "The amount of time to wait before hiding the tooltip when hovering.",
              "name": "--hide-delay"
            },
            {
              "description": "The amount of time to wait before showing the tooltip when hovering.",
              "name": "--show-delay"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The tooltip's target element. Only the first element will be used as the target.",
              "name": ""
            },
            {
              "description": "The tooltip's content. Alternatively, you can use the content prop.",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "positioner",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`tooltip-${++id}`"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popover",
              "type": {
                "text": "PopperInstance"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. Alternatively, you can use the content slot.",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              },
              "default": "'default'",
              "description": "tooltip theme type .",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tooltip so it won't show when triggered.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The distance in pixels from which to offset the tooltip away from its target.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the tooltip."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the tooltip"
            },
            {
              "kind": "method",
              "name": "getTarget"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver"
            },
            {
              "kind": "method",
              "name": "handleMouseOut"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncOptions"
            }
          ],
          "events": [
            {
              "description": "Emitted when the tooltip begins to show.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the tooltip has shown and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the tooltip begins to hide.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the tooltip has hidden and all animations are complete.",
              "name": "sl-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. Alternatively, you can use the content slot.",
              "fieldName": "content"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "type",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              },
              "default": "'default'",
              "description": "tooltip theme type .",
              "fieldName": "type"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tooltip so it won't show when triggered.",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The distance in pixels from which to offset the tooltip away from its target.",
              "fieldName": "distance"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target.",
              "fieldName": "skidding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
              "fieldName": "trigger"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "stable",
          "animations": [
            {
              "name": "tooltip.show",
              "description": "The animation to use when showing the tooltip."
            },
            {
              "name": "tooltip.hide",
              "description": "The animation to use when hiding the tooltip."
            }
          ],
          "tagName": "sl-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tooltip",
          "declaration": {
            "name": "SlTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/transfer/transfer.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/transfer/transfer.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/transfer/transfer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTransfer",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's source,target wrapper.",
              "name": "container"
            },
            {
              "description": "The component's source,target search wraper.",
              "name": "search"
            },
            {
              "description": "The component's filter slInput.",
              "name": "slInput"
            },
            {
              "description": "The component's filter slInput's input.",
              "name": "input"
            },
            {
              "description": "The component's source,target header wraper.",
              "name": "header"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "TransferItem[]"
              },
              "description": "所有选择的数据"
            },
            {
              "kind": "field",
              "name": "renderItem",
              "type": {
                "text": "(item: TransferItem, direction: 'source' | 'target') => TemplateResult<1>"
              },
              "description": "数据项自定渲染"
            },
            {
              "kind": "field",
              "name": "sourceTempSelectedKeys",
              "type": {
                "text": "Array<string | number>"
              },
              "privacy": "private",
              "default": "[]",
              "description": "操作过程左侧当前选中的数据项ID"
            },
            {
              "kind": "field",
              "name": "targetTempSelectedKeys",
              "type": {
                "text": "Array<string | number>"
              },
              "privacy": "private",
              "default": "[]",
              "description": "操作过程中右侧当前选中的数据项ID"
            },
            {
              "kind": "field",
              "name": "targetSelectedKeys",
              "type": {
                "text": "Array<string | number>"
              },
              "default": "[]",
              "description": "右侧选中的数据项ID"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否禁用选择",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "cacheDataSource",
              "privacy": "private",
              "default": "new Map<string | number, TransferItem>()"
            },
            {
              "kind": "method",
              "name": "getItemById",
              "privacy": "public",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "根据Id 获取选项对应的数据项"
            },
            {
              "kind": "field",
              "name": "targetDataList",
              "description": "获取右侧 列表"
            },
            {
              "kind": "field",
              "name": "sourceDataList"
            },
            {
              "kind": "field",
              "name": "filterTargetDataList",
              "type": {
                "text": "Array<TransferItem>"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filterSourceDataList",
              "type": {
                "text": "Array<TransferItem>"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "watchDataSourceChanged"
            },
            {
              "kind": "method",
              "name": "runFilterMethod",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "disableFilter",
              "type": {
                "text": "boolean"
              },
              "description": "是否关闭过滤",
              "attribute": "disable-filter"
            },
            {
              "kind": "field",
              "name": "filterPlaceholder",
              "type": {
                "text": "string | string[]"
              },
              "description": "过滤Input 的placeholder，如果是字符串，则作用于source,target,如果是数组，则第一个作用左边，第二个作用于右边",
              "attribute": "filterPlaceholder"
            },
            {
              "kind": "field",
              "name": "titleTemplate",
              "type": {
                "text": "string[] | ((direct: 'source' | 'target') => TemplateResult<1>)"
              },
              "description": "自定义Title 渲染： 如果是数组，则为左右Title ,如果是函数， 则接收'source'|'target' 返回渲染内容"
            },
            {
              "kind": "field",
              "name": "showSelectAll",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示全选按钮",
              "attribute": "showSelectAll"
            },
            {
              "kind": "field",
              "name": "tableTemplate",
              "type": {
                "text": "(direction: 'source' | 'target') => TemplateResult<1>"
              },
              "description": "Item 显示为Table ,绑定的Table Template，函数，接收'source|target'返回table 组件"
            },
            {
              "kind": "field",
              "name": "filterMethod",
              "type": {
                "text": "(item: TransferItem, ...value: unknown[]) => boolean"
              },
              "default": "defaultTransfilter",
              "description": "数据过滤函数,接收 两个参数：item:数据项，其他为组件绑定的 value：过滤值 ,如果用户自定义了，可以支持多个过滤条件"
            },
            {
              "kind": "field",
              "name": "onSelectChange",
              "type": {
                "text": "(sourceSelectedKeys: string[], targetSelectedKeys: string[]) => boolean"
              },
              "description": "选中项发生改变时的回调函数"
            },
            {
              "kind": "method",
              "name": "renderFilter",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_direction",
                  "type": {
                    "text": "'source' | 'target'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "sourceSearchValue",
              "type": {
                "text": "unknown[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "targetSearchValue",
              "type": {
                "text": "unknown[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "inputTimeoutID",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "doFilterInputHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "_direction",
                  "type": {
                    "text": "'source' | 'target'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitFilterEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "processSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "TransferItem"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "'source' | 'target'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "sourceScrollRef",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetScrollRef",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "sourceScroll",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "targetScroll",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "sourceTable",
              "type": {
                "text": "SlTable"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "targetTable",
              "type": {
                "text": "SlTable"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tableTemplateChange"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'source' | 'target'"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{sourceSearchValue:string[],targetSearchValue:string[]}"
              },
              "description": "Emitted as filter value change.",
              "name": "sl-filter-change"
            },
            {
              "type": {
                "text": "{sourceSelectedKeys:string[]|number,targetSelectedKeys:string[]|number}"
              },
              "description": "当选中项发生变化的时候触发.",
              "name": "sl-transfer-change"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否禁用选择",
              "fieldName": "disabled"
            },
            {
              "name": "disable-filter",
              "type": {
                "text": "boolean"
              },
              "description": "是否关闭过滤",
              "fieldName": "disableFilter"
            },
            {
              "name": "filterPlaceholder",
              "type": {
                "text": "string | string[]"
              },
              "description": "过滤Input 的placeholder，如果是字符串，则作用于source,target,如果是数组，则第一个作用左边，第二个作用于右边",
              "fieldName": "filterPlaceholder"
            },
            {
              "name": "showSelectAll",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示全选按钮",
              "fieldName": "showSelectAll"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-checkbox,sl-button"
          ],
          "tagName": "sl-transfer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTransfer",
            "module": "src/components/transfer/transfer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-transfer",
          "declaration": {
            "name": "SlTransfer",
            "module": "src/components/transfer/transfer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tree/tree.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTree",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The tree's base wrapper.",
              "name": "base"
            },
            {
              "description": "The tree's loading wrapper.",
              "name": "modal"
            },
            {
              "description": "The tree's tree nodes wrapper.",
              "name": "tree-body"
            },
            {
              "description": "The tree nodes footer wrapper.",
              "name": "tree-footer"
            }
          ],
          "slots": [
            {
              "description": "slot:when no tree has no data  or rootNodeData is undefined.",
              "name": "no-data"
            },
            {
              "description": "slot:when for  loading",
              "name": "loading"
            },
            {
              "description": "slot for footer",
              "name": "footer"
            },
            {
              "description": "slot for custome filter",
              "name": "filter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "selectMode",
              "type": {
                "text": "'check' | 'radio' | 'single' | 'none'"
              },
              "default": "'single'",
              "description": "tree 选中方式 selectMode：支持的值为：check, radio,single,none （none,表示不支持选中,single)",
              "attribute": "selectMode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "select_highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "选中的节点，是否高亮显示"
            },
            {
              "kind": "field",
              "name": "includeRoot",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示根节点",
              "attribute": "include_root",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checkCasecade",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "当selectMode='check', 选中的时候是否支持级联选择（选中上级，下级自动选中）",
              "attribute": "check_casecade",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checkOffCasecade",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "当selectMode='check', 取消某个节点选中，下级节点是否也级联不选中",
              "attribute": "check_off_casecade",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "设置是加载状态",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checkedKeys",
              "type": {
                "text": "unknown | Array<unknown> | undefined"
              },
              "description": "树已经选中的节点，如果是多选，则为选中节点的ID值组成的数组，否则为选中节点的ID"
            },
            {
              "kind": "field",
              "name": "filterString",
              "type": {
                "text": "string | unknown"
              },
              "default": "''",
              "description": "树节点过滤 参数，当支持过滤时启用"
            },
            {
              "kind": "field",
              "name": "filterInputPlaceholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "树内置过滤input 的placeHolder",
              "attribute": "filter-input-placeholder"
            },
            {
              "kind": "field",
              "name": "filterMethod",
              "default": "DEFAULT_TREE_FILTER",
              "description": "当支持过滤是， 节点过滤函数，接收TreeNodeData, 和 所有的其他参数，true,则节点满足过滤条件"
            },
            {
              "kind": "field",
              "name": "enableFilter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否支持过滤",
              "attribute": "enable-filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nodeIDProperty",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "description": "数据ID属性，用于内置选中节点 ,默认=id"
            },
            {
              "kind": "field",
              "name": "nodeRender",
              "default": "DEFAULT_TREE_NODE_RENDER",
              "description": "节点渲染函数"
            },
            {
              "kind": "field",
              "name": "rootNodeData",
              "type": {
                "text": "TreeNodeData | undefined"
              },
              "description": "根节点数据源"
            },
            {
              "kind": "field",
              "name": "renderRootNodeData",
              "type": {
                "text": "TreeNodeData | undefined"
              },
              "description": "实际渲染的根节点数据"
            },
            {
              "kind": "field",
              "name": "nodeCacheMap",
              "type": {
                "text": "WeakMap<TreeNodeData, TreeNodeData> | undefined"
              },
              "description": "存储过滤后的 节点数据的映射关系 ，key:过滤后的节点，value:原始的节点"
            },
            {
              "kind": "field",
              "name": "nodeFilterCacheMap",
              "type": {
                "text": "WeakMap<TreeNodeData, TreeNodeData> | undefined"
              },
              "description": "存储过滤后的 节点数据的映射关系 ，key:原始数据，value:过滤后产生的数据"
            },
            {
              "kind": "field",
              "name": "matchFilterNodeSet",
              "type": {
                "text": "Set<TreeNodeData> | undefined"
              },
              "description": "存储 过滤后真实匹配的TreeNodeData"
            },
            {
              "kind": "field",
              "name": "real_treeNodeRender",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "watchSelectModeChange",
              "parameters": [
                {
                  "name": "_oldMode",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newMode",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "doFilter",
              "description": "实现树内部过滤逻辑"
            },
            {
              "kind": "method",
              "name": "getParentNodeData",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ],
              "description": "获取上级数据源"
            },
            {
              "kind": "method",
              "name": "renderAllTreeNode",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderNodeDataTemplate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "TreeNodeData"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "parentData",
                  "optional": true,
                  "type": {
                    "text": "TreeNodeData"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_emitTreeEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "hasFooter",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "slotChangeHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputChangeHander",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "inputFilterHanlder",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handerCheckEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handerRadioEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "watchNodeRenderChange"
            },
            {
              "kind": "method",
              "name": "getClosetTreeNode",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "SlTreeNode | null"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "tree shadowRoot 内部元素"
                }
              ],
              "description": "获取 DOM 最近的TreeNode:"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted when tree-node-click.",
              "name": "sl-tree-node-click"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted when tree-node-state changed.",
              "name": "sl-tree-node-toogle"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted before tree-node-state change.",
              "name": "sl-tree-node-before-toogle"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted when tree-node-state change to opened.",
              "name": "sl-tree-node-open"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted when tree-node-state change closed.",
              "name": "sl-tree-node-close"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted before tree-node-state to open.",
              "name": "sl-tree-node-before-open"
            },
            {
              "type": {
                "text": "{node: SlTreeNode,nodeData: TreeNodeData, parentData:TreeNodeData}"
              },
              "description": "Emitted before tree-node-state to close.",
              "name": "sl-tree-node-before-close"
            },
            {
              "type": {
                "text": "{node:SlTreeNode,checkKeyKeys:checkKeyKeys }"
              },
              "description": "Emitted after tree select node change .",
              "name": "sl-tree-node-select-change"
            }
          ],
          "attributes": [
            {
              "name": "selectMode",
              "type": {
                "text": "'check' | 'radio' | 'single' | 'none'"
              },
              "default": "'single'",
              "description": "tree 选中方式 selectMode：支持的值为：check, radio,single,none （none,表示不支持选中,single)",
              "fieldName": "selectMode"
            },
            {
              "name": "include_root",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "是否显示根节点",
              "fieldName": "includeRoot"
            },
            {
              "name": "check_casecade",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "当selectMode='check', 选中的时候是否支持级联选择（选中上级，下级自动选中）",
              "fieldName": "checkCasecade"
            },
            {
              "name": "check_off_casecade",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "当selectMode='check', 取消某个节点选中，下级节点是否也级联不选中",
              "fieldName": "checkOffCasecade"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "设置是加载状态",
              "fieldName": "loading"
            },
            {
              "name": "filter-input-placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "树内置过滤input 的placeHolder",
              "fieldName": "filterInputPlaceholder"
            },
            {
              "name": "enable-filter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "是否支持过滤",
              "fieldName": "enableFilter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "undefined"
          ],
          "tagName": "sl-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTree",
            "module": "src/components/tree/tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tree",
          "declaration": {
            "name": "SlTree",
            "module": "src/components/tree/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-node/tree-node-util.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "DEFAULT_TREE_NODE_RENDER",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "TreeNodeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "containsNodeData",
          "parameters": [
            {
              "name": "parent",
              "type": {
                "text": "TreeNodeData"
              },
              "description": ": TreeNodeData"
            },
            {
              "name": "findChild",
              "type": {
                "text": "TreeNodeData"
              },
              "description": ": TreeNodeData"
            }
          ],
          "description": "判断数据parent 是否包含了findChild,入股parent==findChild false, 如果parent 包含findChild 则为true"
        },
        {
          "kind": "function",
          "name": "iteratorNodeData",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "TreeNodeData"
              },
              "description": "节点数据"
            },
            {
              "name": "callback",
              "type": {
                "text": "NodeVistor"
              },
              "description": "节点遍历器 (node: TreeNodeData, parentNode?: TreeNodeData,parentChildrenIndex?:number):unkown"
            },
            {
              "name": "parentData",
              "optional": true,
              "type": {
                "text": "TreeNodeData"
              }
            },
            {
              "name": "parentChildrenIndex",
              "default": "0",
              "type": {
                "text": "number"
              }
            },
            {
              "description": ":上级节点(根节点不用设置)",
              "name": "parentNode"
            }
          ],
          "description": "遍历 TreeNodeData"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_TREE_FILTER",
          "type": {
            "text": "TreeNodeFilter"
          },
          "default": "function (data: TreeNodeData, searchString: string) {\n  if (typeof searchString == 'undefined' || searchString.trim() == '') {\n    return true;\n  }\n  const index = data && data.name && data.name?.toLowerCase().indexOf(searchString.toLowerCase());\n  return typeof index != 'undefined' && index > 0;\n}"
        },
        {
          "kind": "function",
          "name": "cloneTreeNodeData",
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "TreeNodeData"
              },
              "description": "需要复制的节点数据"
            },
            {
              "name": "excludePropertiyes",
              "default": "['children']",
              "type": {
                "text": "string[]"
              },
              "description": ", 需要排除的属性，默认['children']"
            }
          ],
          "description": "复制节点数据， 排除指定的属性，children"
        },
        {
          "kind": "function",
          "name": "convertListToTreeNodeData",
          "return": {
            "type": {
              "text": "TreeNodeData"
            }
          },
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "Array<DataType>"
              },
              "description": ":节点数组列表"
            },
            {
              "name": "root",
              "type": {
                "text": "TreeNodeData"
              },
              "description": ":根节点,注意根节点id值"
            },
            {
              "name": "option",
              "default": "{\n    idProp: 'id',\n    parentIDPro: 'parentID',\n    childrenPro: 'children'\n  }",
              "type": {
                "text": "{ idProp: string; parentIDPro: string; childrenPro: string }"
              },
              "description": ": 转化参数 ，指定id,parentID 所属属性。"
            }
          ],
          "description": "将id,parentID 的树节点数据，转化为TreeNodeData。"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULT_TREE_NODE_RENDER",
          "declaration": {
            "name": "DEFAULT_TREE_NODE_RENDER",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "containsNodeData",
          "declaration": {
            "name": "containsNodeData",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "iteratorNodeData",
          "declaration": {
            "name": "iteratorNodeData",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_TREE_FILTER",
          "declaration": {
            "name": "DEFAULT_TREE_FILTER",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "cloneTreeNodeData",
          "declaration": {
            "name": "cloneTreeNodeData",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertListToTreeNodeData",
          "declaration": {
            "name": "convertListToTreeNodeData",
            "module": "src/components/tree-node/tree-node-util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-node/tree-node.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tree-node/tree-node.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-node/tree-node.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTreeNode",
          "cssProperties": [
            {
              "description": "toogle-icon's margin from text .",
              "name": "--sl-spacing-xx-small"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The component's node self wrapper.",
              "name": "node"
            },
            {
              "description": "The component's children wrapper.",
              "name": "children"
            },
            {
              "description": "The component's toogle icon.",
              "name": "node_toogle_icon"
            },
            {
              "description": "The node icon.",
              "name": "node-icon"
            },
            {
              "description": "The component's node text render wrapper .",
              "name": "node-span"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "childTreeNodeElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "tree-node子节点DIV"
            },
            {
              "kind": "field",
              "name": "treeNodeElement",
              "type": {
                "text": "HTMLElement"
              },
              "description": "本身node 渲染容器"
            },
            {
              "kind": "field",
              "name": "nodeData",
              "type": {
                "text": "TreeNodeData | undefined"
              },
              "description": "节点数据源"
            },
            {
              "kind": "method",
              "name": "_watchOnSetNodeData"
            },
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "SlTree"
              },
              "description": "绑定树对象"
            },
            {
              "kind": "field",
              "name": "nodeRender",
              "type": {
                "text": "NodeRenderInterface"
              },
              "default": "DEFAULT_TREE_NODE_RENDER",
              "description": "树节点渲染器"
            },
            {
              "kind": "field",
              "name": "parentNodeData",
              "type": {
                "text": "TreeNodeData | undefined"
              },
              "description": "父节点数据"
            },
            {
              "kind": "method",
              "name": "renderChildren",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "subChildSize",
              "description": "获取直接孩子数量"
            },
            {
              "kind": "field",
              "name": "isClose",
              "description": "是否是关闭状"
            },
            {
              "kind": "method",
              "name": "isTreeNodeSelected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "eventType",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "ANIMATE_duration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "static": true,
              "default": "300"
            },
            {
              "kind": "field",
              "name": "ANIMATE_easing",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "default": "'ease'"
            },
            {
              "kind": "method",
              "name": "_clickTrigerHander",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "NODE_OPEN_ICON",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'caret-down-fill'"
            },
            {
              "kind": "field",
              "name": "NODE_CLOSE_ICON",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'caret-right'"
            },
            {
              "kind": "method",
              "name": "renderNodeData",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clickNodeHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setNodeDataProperty",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted when node name click.",
              "name": "sl-node-click"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted before node open .",
              "name": "sl-node-before-open"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted before node close .",
              "name": "sl-node-before-close"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted before node state change :open or close.",
              "name": "sl-node-before-toogle"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted after node state close.",
              "name": "sl-node-close"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted after node state opened.",
              "name": "sl-node-open"
            },
            {
              "type": {
                "text": "{nodeData:TreeNodeData,node:SlTreeNode}"
              },
              "description": "Emitted when node state toogle.",
              "name": "sl-node-toogle"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-tree-node",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTreeNode",
            "module": "src/components/tree-node/tree-node.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tree-node",
          "declaration": {
            "name": "SlTreeNode",
            "module": "src/components/tree-node/tree-node.ts"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "@shoelace-style/shoelace",
    "description": "A forward-thinking library of web components.",
    "version": "2.0.0-beta.57",
    "author": "Cory LaViska",
    "homepage": "https://github.com/shoelace-style/shoelace",
    "license": "MIT"
  }
}
